
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#include <cstdlib>
#include "parser.h"

#ifndef JSON_CPP_MAX_INTEGER
#define JSON_CPP_MAX_INTEGER(T) ((T) ~(((T) ~(T) 0 <= (T) 0 ? -2 : 0)*((T) 1<<(8*sizeof(T)-2))))
#endif

namespace octopus {

ManifestParser::Error::operator ManifestParser::Error::Type() const {
    return type;
}

ManifestParser::Error::operator bool() const {
    return type != Error::OK;
}

const char *ManifestParser::Error::typeString() const {
    switch (type) {
        case Error::OK:
            return "OK";
        case Error::JSON_SYNTAX_ERROR:
            return "JSON_SYNTAX_ERROR";
        case Error::UNEXPECTED_END_OF_FILE:
            return "UNEXPECTED_END_OF_FILE";
        case Error::TYPE_MISMATCH:
            return "TYPE_MISMATCH";
        case Error::ARRAY_SIZE_MISMATCH:
            return "ARRAY_SIZE_MISMATCH";
        case Error::UNKNOWN_ENUM_VALUE:
            return "UNKNOWN_ENUM_VALUE";
        case Error::UNKNOWN_KEY:
            return "UNKNOWN_KEY";
        case Error::MISSING_KEY:
            return "MISSING_KEY";
        case Error::REPEATED_KEY:
            return "REPEATED_KEY";
        case Error::VALUE_OUT_OF_RANGE:
            return "VALUE_OUT_OF_RANGE";
        case Error::STRING_EXPECTED:
            return "STRING_EXPECTED";
        case Error::UTF16_ENCODING_ERROR:
            return "UTF16_ENCODING_ERROR";
    }
    return "";
}

ManifestParser::ManifestParser(const char *str) : cur(str) { }

void ManifestParser::skipWhitespace() {
    while (*cur == ' ' || *cur == '\t' || *cur == '\r' || *cur == '\n')
        ++cur;
}

ManifestParser::Error::Type ManifestParser::skipValue() {
    skipWhitespace();
    switch (*cur) {
        case '\0':
            return Error::UNEXPECTED_END_OF_FILE;
        case '"':
            while (*++cur != '"') {
                if (!*(cur += *cur == '\\'))
                    return Error::UNEXPECTED_END_OF_FILE;
            }
            ++cur;
            return Error::OK;
        case '[': case '{':
            ++cur;
            for (int openBrackets = 1; openBrackets;) {
                switch (*cur) {
                    case '\0':
                        return Error::UNEXPECTED_END_OF_FILE;
                    case '"':
                        if (Error::Type error = skipValue())
                            return error;
                        continue;
                    case '[': case '{':
                        ++openBrackets;
                        break;
                    case ']': case '}':
                        --openBrackets;
                        break;
                }
                ++cur;
            }
            return Error::OK;
        default:
            if (isAlphanumeric(*cur) || *cur == '-' || *cur == '.') {
                while (isAlphanumeric(*++cur) || *cur == '+' || *cur == '-' || *cur == '.');
                return Error::OK;
            }
    }
    return Error::JSON_SYNTAX_ERROR;
}

bool ManifestParser::matchSymbol(char s) {
    skipWhitespace();
    if (*cur == s) {
        ++cur;
        return true;
    }
    return false;
}

bool ManifestParser::readHexQuad(int &value) {
    return (
        cur[0] && cur[1] && cur[2] && cur[3] &&
        (value = decodeHexDigit(cur[3])) >= 0 &&
        (value += 0x0010*decodeHexDigit(cur[2])) >= 0 &&
        (value += 0x0100*decodeHexDigit(cur[1])) >= 0 &&
        (value += 0x1000*decodeHexDigit(cur[0])) >= 0 &&
        (cur += 4, true)
    );
}

ManifestParser::Error::Type ManifestParser::unescape(char *codepoints) {
    switch (++cur, *cur++) {
        case '\0':
            --cur;
            return Error::UNEXPECTED_END_OF_FILE;
        case 'B': case 'b': codepoints[0] = '\b'; break;
        case 'F': case 'f': codepoints[0] = '\f'; break;
        case 'N': case 'n': codepoints[0] = '\n'; break;
        case 'R': case 'r': codepoints[0] = '\r'; break;
        case 'T': case 't': codepoints[0] = '\t'; break;
        case 'U': case 'u': {
            unsigned long cp;
            int wc;
            if (!readHexQuad(wc))
                return Error::JSON_SYNTAX_ERROR;
            if ((wc&0xfc00) == 0xd800) {
                if (!(cur[0] == '\\' && (cur[1] == 'u' || cur[1] == 'U')))
                    return Error::UTF16_ENCODING_ERROR;
                cp = (unsigned long) ((wc&0x03ff)<<10);
                cur += 2;
                if (!readHexQuad(wc))
                    return Error::JSON_SYNTAX_ERROR;
                if ((wc&0xfc00) != 0xdc00)
                    return Error::UTF16_ENCODING_ERROR;
                cp = 0x010000+(cp|(unsigned long) (wc&0x03ff));
            } else
                cp = (unsigned long) wc;
            if (cp&0xffffff80) {
                int len;
                for (len = 1; cp>>(5*len+1) && len < 6; ++len);
                codepoints[0] = (char) (0xff<<(8-len)|cp>>6*(len-1));
                for (int i = 1; i < len; ++i)
                    *++codepoints = (char) (0x80|(cp>>6*(len-i-1)&0x3f));
            } else
                codepoints[0] = (char) cp;
            break;
        }
        default:
            codepoints[0] = cur[-1];
    }
    codepoints[1] = '\0';
    return Error::OK;
}

bool ManifestParser::isAlphanumeric(char c) {
    switch (c) {
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G': case 'H': case 'I':
        case 'J': case 'K': case 'L': case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i':
        case 'j': case 'k': case 'l': case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
        case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            return true;
        default:
            return false;
    }
}

int ManifestParser::decodeHexDigit(char digit) {
    switch (digit) {
        case '0': return 0x00;
        case '1': return 0x01;
        case '2': return 0x02;
        case '3': return 0x03;
        case '4': return 0x04;
        case '5': return 0x05;
        case '6': return 0x06;
        case '7': return 0x07;
        case '8': return 0x08;
        case '9': return 0x09;
        case 'A': case 'a': return 0x0a;
        case 'B': case 'b': return 0x0b;
        case 'C': case 'c': return 0x0c;
        case 'D': case 'd': return 0x0d;
        case 'E': case 'e': return 0x0e;
        case 'F': case 'f': return 0x0f;
    }
    return -1;
}

template <typename T>
ManifestParser::Error::Type ManifestParser::readSigned(T &value) {
    bool negative = *cur == '-' && (++cur, true);
    if (*cur >= '0' && *cur <= '9')
        value = *cur++-'0';
    else
        return Error::TYPE_MISMATCH;
    while (*cur >= '0' && *cur <= '9') {
        if (value < 0 || (value >= JSON_CPP_MAX_INTEGER(T)/10 && (value > JSON_CPP_MAX_INTEGER(T)/10 || (static_cast<T>(10*value+(*cur-'0')) < value && (!negative || *cur-'0' != (JSON_CPP_MAX_INTEGER(T)-9)%10)))))
            return Error::VALUE_OUT_OF_RANGE;
        value = static_cast<T>(10*value+(*cur++-'0'));
    }
    if (negative)
        value = -value;
    return Error::OK;
}

ManifestParser::Error ManifestParser::parse(octopus::OctopusManifest &output, const char *jsonString) {
    ManifestParser parser(jsonString);
    Error::Type error = parser.parseOctopusOctopusManifest(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

ManifestParser::Error::Type ManifestParser::parseStdString(std::string &value) {
    if (!matchSymbol('"'))
        return Error::STRING_EXPECTED;
    value.clear();
    while (*cur != '"') {
        if (*cur == '\\') {
            char utfBuffer[8];
            if (Error error = unescape(utfBuffer))
                return error;
            value += utfBuffer;
            continue;
        }
        if (!*cur)
            return Error::UNEXPECTED_END_OF_FILE;
        value.push_back(*cur);
        ++cur;
    }
    ++cur;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalStdString(nonstd::optional<std::string> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdString((value = std::string()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusResourceLocationType(octopus::ResourceLocation::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    if (buffer.size() > 0) {
        switch (buffer[0]) {
            case 'E':
                if (buffer == "EXTERNAL") {
                    value = octopus::ResourceLocation::Type::EXTERNAL;
                    return Error::OK; 
                }
                break;
            case 'R':
                if (buffer == "RELATIVE") {
                    value = octopus::ResourceLocation::Type::RELATIVE;
                    return Error::OK; 
                }
                break;
        }
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

ManifestParser::Error::Type ManifestParser::parseOctopusResourceLocation(octopus::ResourceLocation &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'p':
                    if (buffer == "path") {
                        if (Error error = parseNonstdOptionalStdString(value.path))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "type") {
                        if (Error error = parseOctopusResourceLocationType(value.type))
                            return error;
                        continue;
                    }
                    break;
                case 'u':
                    if (buffer == "url") {
                        if (Error error = parseNonstdOptionalStdString(value.url))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "versionHash") {
                        if (Error error = parseNonstdOptionalStdString(value.versionHash))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalOctopusResourceLocation(nonstd::optional<octopus::ResourceLocation> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusResourceLocation((value = octopus::ResourceLocation()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusAssetFont(octopus::AssetFont &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'f':
                    if (buffer == "fontType") {
                        if (Error error = parseNonstdOptionalStdString(value.fontType))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "location") {
                        if (Error error = parseNonstdOptionalOctopusResourceLocation(value.location))
                            return error;
                        continue;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
                case 'r':
                    if (buffer == "refId") {
                        if (Error error = parseStdString(value.refId))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusAssetFont(std::vector<octopus::AssetFont> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusAssetFont((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusAssetImage(octopus::AssetImage &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "name") {
                    if (Error error = parseStdString(value.name))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "refId") {
                    if (Error error = parseStdString(value.refId))
                        return error;
                    continue;
                }
                break;
            case 8:
                if (buffer == "location") {
                    if (Error error = parseOctopusResourceLocation(value.location))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusAssetImage(std::vector<octopus::AssetImage> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusAssetImage((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusAssets(octopus::Assets &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 5:
                if (buffer == "fonts") {
                    if (Error error = parseStdVectorOctopusAssetFont(value.fonts))
                        return error;
                    continue;
                }
                break;
            case 6:
                if (buffer == "images") {
                    if (Error error = parseStdVectorOctopusAssetImage(value.images))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalOctopusAssets(nonstd::optional<octopus::Assets> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusAssets((value = octopus::Assets()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusArtifactType(octopus::Artifact::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 6:
            if (buffer == "SOURCE") {
                value = octopus::Artifact::Type::SOURCE;
                return Error::OK; 
            }
            break;
        case 7:
            if (buffer == "OCTOPUS") {
                value = octopus::Artifact::Type::OCTOPUS;
                return Error::OK; 
            }
            break;
        case 16:
            if (buffer == "OCTOPUS_EXPANDED") {
                value = octopus::Artifact::Type::OCTOPUS_EXPANDED;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

ManifestParser::Error::Type ManifestParser::parseOctopusArtifact(octopus::Artifact &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "type") {
                    if (Error error = parseOctopusArtifactType(value.type))
                        return error;
                    continue;
                }
                break;
            case 8:
                if (buffer == "location") {
                    if (Error error = parseOctopusResourceLocation(value.location))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusArtifact(std::vector<octopus::Artifact> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusArtifact((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseInt(int &value) {
    skipWhitespace();
    return readSigned(value);
}

ManifestParser::Error::Type ManifestParser::parseStdVectorStdString(std::vector<std::string> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusStatusError(::octopus::Status::Error &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "code") {
                    if (Error error = parseInt(value.code))
                        return error;
                    continue;
                }
                break;
            case 7:
                if (buffer == "message") {
                    if (Error error = parseStdString(value.message))
                        return error;
                    continue;
                }
                break;
            case 10:
                if (buffer == "stacktrace") {
                    if (Error error = parseStdVectorStdString(value.stacktrace))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalOctopusStatusError(nonstd::optional<::octopus::Status::Error> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusStatusError((value = ::octopus::Status::Error()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseDouble(double &value) {
    char *end;
    value = strtod(cur, &end);
    if (end == cur)
        return Error::TYPE_MISMATCH;
    cur = end;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalDouble(nonstd::optional<double> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseDouble((value = double()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusStatusValue(octopus::Status::Value &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 5:
            if (buffer == "READY") {
                value = octopus::Status::READY;
                return Error::OK; 
            }
            break;
        case 6:
            if (buffer == "FAILED") {
                value = octopus::Status::FAILED;
                return Error::OK; 
            }
            break;
        case 7:
            if (buffer == "PENDING") {
                value = octopus::Status::PENDING;
                return Error::OK; 
            }
            break;
        case 10:
            if (buffer == "PROCESSING") {
                value = octopus::Status::PROCESSING;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

ManifestParser::Error::Type ManifestParser::parseOctopusStatus(octopus::Status &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'e':
                    if (buffer == "error") {
                        if (Error error = parseNonstdOptionalOctopusStatusError(value.error))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "time") {
                        if (Error error = parseNonstdOptionalDouble(value.time))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "value") {
                        if (Error error = parseOctopusStatusValue(value.value))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalOctopusStatus(nonstd::optional<octopus::Status> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusStatus((value = octopus::Status()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusChunkType(octopus::Chunk::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    if (buffer.size() > 6) {
        switch (buffer[6]) {
            case 'E':
                if (buffer == "STYLE_EFFECT") {
                    value = octopus::Chunk::Type::STYLE_EFFECT;
                    return Error::OK; 
                }
                break;
            case 'F':
                if (buffer == "STYLE_FILL") {
                    value = octopus::Chunk::Type::STYLE_FILL;
                    return Error::OK; 
                }
                break;
            case 'G':
                if (buffer == "STYLE_GRID") {
                    value = octopus::Chunk::Type::STYLE_GRID;
                    return Error::OK; 
                }
                break;
            case 'L':
                if (buffer == "STYLE_LAYER") {
                    value = octopus::Chunk::Type::STYLE_LAYER;
                    return Error::OK; 
                }
                break;
            case 'T':
                if (buffer == "STYLE_TEXT") {
                    value = octopus::Chunk::Type::STYLE_TEXT;
                    return Error::OK; 
                }
                break;
        }
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

ManifestParser::Error::Type ManifestParser::parseOctopusChunk(octopus::Chunk &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'a':
                    switch (buffer.size()) {
                        case 6:
                            if (buffer == "assets") {
                                if (Error error = parseNonstdOptionalOctopusAssets(value.assets))
                                    return error;
                                continue;
                            }
                            break;
                        case 9:
                            if (buffer == "artifacts") {
                                if (Error error = parseStdVectorOctopusArtifact(value.artifacts))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'd':
                    if (buffer == "description") {
                        if (Error error = parseNonstdOptionalStdString(value.description))
                            return error;
                        continue;
                    }
                    break;
                case 'h':
                    if (buffer == "hash") {
                        if (Error error = parseNonstdOptionalStdString(value.hash))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "id") {
                        if (Error error = parseStdString(value.id))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "location") {
                        if (Error error = parseOctopusResourceLocation(value.location))
                            return error;
                        continue;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "preview") {
                        if (Error error = parseNonstdOptionalOctopusResourceLocation(value.preview))
                            return error;
                        continue;
                    }
                    break;
                case 's':
                    if (buffer == "status") {
                        if (Error error = parseNonstdOptionalOctopusStatus(value.status))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "type") {
                        if (Error error = parseOctopusChunkType(value.type))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusChunk(std::vector<octopus::Chunk> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusChunk((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusBounds(octopus::Bounds &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'h':
                    if (buffer == "height") {
                        if (Error error = parseDouble(value.height))
                            return error;
                        continue;
                    }
                    break;
                case 'w':
                    if (buffer == "width") {
                        if (Error error = parseDouble(value.width))
                            return error;
                        continue;
                    }
                    break;
                case 'x':
                    if (buffer == "x") {
                        if (Error error = parseDouble(value.x))
                            return error;
                        continue;
                    }
                    break;
                case 'y':
                    if (buffer == "y") {
                        if (Error error = parseDouble(value.y))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusReferenceType(octopus::Reference::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 5:
            if (buffer == "CHUNK") {
                value = octopus::Reference::Type::CHUNK;
                return Error::OK; 
            }
            break;
        case 8:
            if (buffer == "ARTBOARD") {
                value = octopus::Reference::Type::ARTBOARD;
                return Error::OK; 
            }
            break;
        case 9:
            if (buffer == "COMPONENT") {
                value = octopus::Reference::Type::COMPONENT;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

ManifestParser::Error::Type ManifestParser::parseOctopusReference(octopus::Reference &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 2:
                if (buffer == "id") {
                    if (Error error = parseStdString(value.id))
                        return error;
                    continue;
                }
                break;
            case 4:
                if (buffer == "type") {
                    if (Error error = parseOctopusReferenceType(value.type))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusReference(std::vector<octopus::Reference> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusReference((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalOctopusReference(nonstd::optional<octopus::Reference> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusReference((value = octopus::Reference()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusComponentRole(octopus::Component::Role &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    switch (buffer.size()) {
        case 7:
            if (buffer == "PARTIAL") {
                value = octopus::Component::Role::PARTIAL;
                return Error::OK; 
            }
            break;
        case 8:
            if (buffer == "ARTBOARD") {
                value = octopus::Component::Role::ARTBOARD;
                return Error::OK; 
            }
            break;
        case 9:
            if (buffer == "COMPONENT") {
                value = octopus::Component::Role::COMPONENT;
                return Error::OK; 
            }
            break;
        case 10:
            if (buffer == "PASTEBOARD") {
                value = octopus::Component::Role::PASTEBOARD;
                return Error::OK; 
            }
            break;
    }
    return Error::UNKNOWN_ENUM_VALUE;
}

ManifestParser::Error::Type ManifestParser::parseOctopusComponentSet(octopus::ComponentSet &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 2:
                if (buffer == "id") {
                    if (Error error = parseStdString(value.id))
                        return error;
                    continue;
                }
                break;
            case 4:
                if (buffer == "name") {
                    if (Error error = parseStdString(value.name))
                        return error;
                    continue;
                }
                break;
            case 11:
                if (buffer == "description") {
                    if (Error error = parseNonstdOptionalStdString(value.description))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdMapStdStringStdString(std::map<std::string, std::string> &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(value[buffer]))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusComponentVariantMeta(octopus::Component::VariantMeta &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 2:
                if (buffer == "of") {
                    if (Error error = parseOctopusComponentSet(value.of))
                        return error;
                    continue;
                }
                break;
            case 10:
                if (buffer == "properties") {
                    if (Error error = parseStdMapStdStringStdString(value.properties))
                        return error;
                    continue;
                }
                break;
            case 11:
                if (buffer == "description") {
                    if (Error error = parseNonstdOptionalStdString(value.description))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseNonstdOptionalOctopusComponentVariantMeta(nonstd::optional<octopus::Component::VariantMeta> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusComponentVariantMeta((value = octopus::Component::VariantMeta()).value()))
        return error;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusComponent(octopus::Component &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'a':
                    switch (buffer.size()) {
                        case 6:
                            if (buffer == "assets") {
                                if (Error error = parseNonstdOptionalOctopusAssets(value.assets))
                                    return error;
                                continue;
                            }
                            break;
                        case 9:
                            if (buffer == "artifacts") {
                                if (Error error = parseStdVectorOctopusArtifact(value.artifacts))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'b':
                    if (buffer == "bounds") {
                        if (Error error = parseOctopusBounds(value.bounds))
                            return error;
                        continue;
                    }
                    break;
                case 'd':
                    switch (buffer.size()) {
                        case 11:
                            if (buffer == "description") {
                                if (Error error = parseNonstdOptionalStdString(value.description))
                                    return error;
                                continue;
                            }
                            break;
                        case 12:
                            if (buffer == "dependencies") {
                                if (Error error = parseStdVectorOctopusReference(value.dependencies))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'h':
                    if (buffer == "hash") {
                        if (Error error = parseNonstdOptionalStdString(value.hash))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "id") {
                        if (Error error = parseStdString(value.id))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "location") {
                        if (Error error = parseOctopusResourceLocation(value.location))
                            return error;
                        continue;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    switch (buffer.size()) {
                        case 7:
                            if (buffer == "preview") {
                                if (Error error = parseNonstdOptionalOctopusResourceLocation(value.preview))
                                    return error;
                                continue;
                            }
                            break;
                        case 8:
                            if (buffer == "parentId") {
                                if (Error error = parseNonstdOptionalOctopusReference(value.parentId))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'r':
                    if (buffer == "role") {
                        if (Error error = parseOctopusComponentRole(value.role))
                            return error;
                        continue;
                    }
                    break;
                case 's':
                    if (buffer == "status") {
                        if (Error error = parseNonstdOptionalOctopusStatus(value.status))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "variant") {
                        if (Error error = parseNonstdOptionalOctopusComponentVariantMeta(value.variant))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusComponent(std::vector<octopus::Component> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusComponent((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusLibrary(octopus::Library &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'a':
                    if (buffer == "assets") {
                        if (Error error = parseNonstdOptionalOctopusAssets(value.assets))
                            return error;
                        continue;
                    }
                    break;
                case 'c':
                    if (buffer == "children") {
                        if (Error error = parseStdVectorOctopusReference(value.children))
                            return error;
                        continue;
                    }
                    break;
                case 'd':
                    if (buffer == "description") {
                        if (Error error = parseNonstdOptionalStdString(value.description))
                            return error;
                        continue;
                    }
                    break;
                case 'h':
                    if (buffer == "hash") {
                        if (Error error = parseNonstdOptionalStdString(value.hash))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "id") {
                        if (Error error = parseStdString(value.id))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "location") {
                        if (Error error = parseNonstdOptionalOctopusResourceLocation(value.location))
                            return error;
                        continue;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "preview") {
                        if (Error error = parseNonstdOptionalOctopusResourceLocation(value.preview))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusLibrary(std::vector<octopus::Library> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusLibrary((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusOctopusManifestOrigin(octopus::OctopusManifest::Origin &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "name") {
                    if (Error error = parseStdString(value.name))
                        return error;
                    continue;
                }
                break;
            case 7:
                if (buffer == "version") {
                    if (Error error = parseStdString(value.version))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusPage(octopus::Page &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'c':
                    if (buffer == "children") {
                        if (Error error = parseStdVectorOctopusReference(value.children))
                            return error;
                        continue;
                    }
                    break;
                case 'd':
                    if (buffer == "description") {
                        if (Error error = parseNonstdOptionalStdString(value.description))
                            return error;
                        continue;
                    }
                    break;
                case 'h':
                    if (buffer == "hash") {
                        if (Error error = parseNonstdOptionalStdString(value.hash))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "id") {
                        if (Error error = parseStdString(value.id))
                            return error;
                        continue;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseStdVectorOctopusPage(std::vector<octopus::Page> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusPage((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

ManifestParser::Error::Type ManifestParser::parseOctopusOctopusManifest(octopus::OctopusManifest &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'c':
                    switch (buffer.size()) {
                        case 6:
                            if (buffer == "chunks") {
                                if (Error error = parseStdVectorOctopusChunk(value.chunks))
                                    return error;
                                continue;
                            }
                            break;
                        case 10:
                            if (buffer == "components") {
                                if (Error error = parseStdVectorOctopusComponent(value.components))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'h':
                    if (buffer == "hash") {
                        if (Error error = parseNonstdOptionalStdString(value.hash))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "interactions") {
                        if (Error error = parseNonstdOptionalOctopusResourceLocation(value.interactions))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "libraries") {
                        if (Error error = parseStdVectorOctopusLibrary(value.libraries))
                            return error;
                        continue;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    if (buffer == "origin") {
                        if (Error error = parseOctopusOctopusManifestOrigin(value.origin))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "pages") {
                        if (Error error = parseStdVectorOctopusPage(value.pages))
                            return error;
                        continue;
                    }
                    break;
                case 'r':
                    if (buffer == "resourcesBase") {
                        if (Error error = parseStdString(value.resourcesBase))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "version") {
                        if (Error error = parseStdString(value.version))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

}
