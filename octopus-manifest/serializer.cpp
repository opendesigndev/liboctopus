
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#include "serializer.h"

#ifndef JSON_CPP_SERIALIZE_DOUBLE
#include <cstdio>
#define JSON_CPP_SERIALIZE_DOUBLE(outBuffer, x) sprintf(outBuffer, "%.17g", x)
#endif

namespace octopus {

ManifestSerializer::Error::operator ManifestSerializer::Error::Type() const {
    return type;
}

ManifestSerializer::Error::operator bool() const {
    return type != Error::OK;
}

const char *ManifestSerializer::Error::typeString() const {
    switch (type) {
        case Error::OK:
            return "OK";
        case Error::UNREPRESENTABLE_FLOAT_VALUE:
            return "UNREPRESENTABLE_FLOAT_VALUE";
        case Error::UNKNOWN_ENUM_VALUE:
            return "UNKNOWN_ENUM_VALUE";
    }
    return "";
}

ManifestSerializer::ManifestSerializer(std::string &json) : json(json) {
    json.clear();
}

void ManifestSerializer::write(char c) {
    json.push_back(c);
}

void ManifestSerializer::write(const char *str) {
    json += str;
}

void ManifestSerializer::writeEscaped(char c) {
    switch (c) {
        case '\x00': write("\\u0000"); break;
        case '\x01': write("\\u0001"); break;
        case '\x02': write("\\u0002"); break;
        case '\x03': write("\\u0003"); break;
        case '\x04': write("\\u0004"); break;
        case '\x05': write("\\u0005"); break;
        case '\x06': write("\\u0006"); break;
        case '\x07': write("\\u0007"); break;
        case '\b': write("\\b"); break;
        case '\t': write("\\t"); break;
        case '\n': write("\\n"); break;
        case '\x0b': write("\\u000b"); break;
        case '\f': write("\\f"); break;
        case '\r': write("\\r"); break;
        case '\x0e': write("\\u000e"); break;
        case '\x0f': write("\\u000f"); break;
        case '\x10': write("\\u0010"); break;
        case '\x11': write("\\u0011"); break;
        case '\x12': write("\\u0012"); break;
        case '\x13': write("\\u0013"); break;
        case '\x14': write("\\u0014"); break;
        case '\x15': write("\\u0015"); break;
        case '\x16': write("\\u0016"); break;
        case '\x17': write("\\u0017"); break;
        case '\x18': write("\\u0018"); break;
        case '\x19': write("\\u0019"); break;
        case '\x1a': write("\\u001a"); break;
        case '\x1b': write("\\u001b"); break;
        case '\x1c': write("\\u001c"); break;
        case '\x1d': write("\\u001d"); break;
        case '\x1e': write("\\u001e"); break;
        case '\x1f': write("\\u001f"); break;
        case '"': write("\\\""); break;
        case '\\': write("\\\\"); break;
        default:
            write(c);
    }
}

template <typename U, typename T>
void ManifestSerializer::writeSigned(T value) {
    if (value < 0)
        write('-'), value = -value;
    U unsignedValue = static_cast<U>(value);
    char buffer[4*(sizeof(U)+1)], *cur = &(buffer[4*(sizeof(U)+1)-1] = '\0');
    do *--cur = '0'+unsignedValue%10; while (unsignedValue /= 10);
    write(cur);
}

ManifestSerializer::Error ManifestSerializer::serialize(std::string &jsonString, octopus::OctopusManifest const &input) {
    return ManifestSerializer(jsonString).serializeOctopusOctopusManifest(input);
}

ManifestSerializer::Error ManifestSerializer::serializeStdString(std::string const &value) {
    write('"');
    for (std::string::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { char c = *i; writeEscaped(c); }
    write('"');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusOctopusManifestOrigin(octopus::OctopusManifest::Origin const &value) {
    write("{\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write(",\"" "version" "\":");
    if (Error error = serializeStdString(value.version))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusReferenceType(octopus::Reference::Type const &value) {
    switch (value) {
        case octopus::Reference::Type::CHUNK: write("\"CHUNK\""); break;
        case octopus::Reference::Type::COMPONENT: write("\"COMPONENT\""); break;
        case octopus::Reference::Type::ARTBOARD: write("\"ARTBOARD\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusReference(octopus::Reference const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusReferenceType(value.type))
        return error;
    write(",\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusReference(std::vector<octopus::Reference> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::Reference>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::Reference const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusReference(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusPage(octopus::Page const &value) {
    write("{\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write(",\"" "children" "\":");
    if (Error error = serializeStdVectorOctopusReference(value.children))
        return error;
    if (value.description.has_value()) {
        write(",\"" "description" "\":");
        if (Error error = serializeStdString(value.description.value()))
            return error;
    }
    if (value.hash.has_value()) {
        write(",\"" "hash" "\":");
        if (Error error = serializeStdString(value.hash.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusPage(std::vector<octopus::Page> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::Page>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::Page const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusPage(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusComponentRole(octopus::Component::Role const &value) {
    switch (value) {
        case octopus::Component::Role::COMPONENT: write("\"COMPONENT\""); break;
        case octopus::Component::Role::ARTBOARD: write("\"ARTBOARD\""); break;
        case octopus::Component::Role::PASTEBOARD: write("\"PASTEBOARD\""); break;
        case octopus::Component::Role::PARTIAL: write("\"PARTIAL\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeDouble(double const &value) {
    char buffer[64];
    JSON_CPP_SERIALIZE_DOUBLE(buffer, value);
    switch (buffer[1]) {
        case 'i':
            write("-1e999");
            break;
        case 'n':
            if (buffer[0] == 'i') {
                write("1e999");
                break;
            }
            // fallthrough
        case 'a':
            write("\"NaN\"");
            break;
        default:
            write(buffer);
    }
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusBounds(octopus::Bounds const &value) {
    write("{\"" "x" "\":");
    if (Error error = serializeDouble(value.x))
        return error;
    write(",\"" "y" "\":");
    if (Error error = serializeDouble(value.y))
        return error;
    write(",\"" "width" "\":");
    if (Error error = serializeDouble(value.width))
        return error;
    write(",\"" "height" "\":");
    if (Error error = serializeDouble(value.height))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusResourceLocationType(octopus::ResourceLocation::Type const &value) {
    switch (value) {
        case octopus::ResourceLocation::Type::RELATIVE: write("\"RELATIVE\""); break;
        case octopus::ResourceLocation::Type::EXTERNAL: write("\"EXTERNAL\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusResourceLocation(octopus::ResourceLocation const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusResourceLocationType(value.type))
        return error;
    if (value.path.has_value()) {
        write(",\"" "path" "\":");
        if (Error error = serializeStdString(value.path.value()))
            return error;
    }
    if (value.url.has_value()) {
        write(",\"" "url" "\":");
        if (Error error = serializeStdString(value.url.value()))
            return error;
    }
    if (value.versionHash.has_value()) {
        write(",\"" "versionHash" "\":");
        if (Error error = serializeStdString(value.versionHash.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusArtifactType(octopus::Artifact::Type const &value) {
    switch (value) {
        case octopus::Artifact::Type::OCTOPUS: write("\"OCTOPUS\""); break;
        case octopus::Artifact::Type::OCTOPUS_EXPANDED: write("\"OCTOPUS_EXPANDED\""); break;
        case octopus::Artifact::Type::SOURCE: write("\"SOURCE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusArtifact(octopus::Artifact const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusArtifactType(value.type))
        return error;
    write(",\"" "location" "\":");
    if (Error error = serializeOctopusResourceLocation(value.location))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusArtifact(std::vector<octopus::Artifact> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::Artifact>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::Artifact const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusArtifact(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusAssetFont(octopus::AssetFont const &value) {
    bool prev = false;
    write('{');
    if (value.location.has_value()) {
        write("\"" "location" "\":");
        if (Error error = serializeOctopusResourceLocation(value.location.value()))
            return error;
        prev = true;
    }
    if (value.fontType.has_value()) {
        if (prev)
            write(',');
        write("\"" "fontType" "\":");
        if (Error error = serializeStdString(value.fontType.value()))
            return error;
        prev = true;
    }
    if (prev)
        write(',');
    write("\"" "refId" "\":");
    if (Error error = serializeStdString(value.refId))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusAssetFont(std::vector<octopus::AssetFont> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::AssetFont>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::AssetFont const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusAssetFont(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusAssetImage(octopus::AssetImage const &value) {
    write("{\"" "location" "\":");
    if (Error error = serializeOctopusResourceLocation(value.location))
        return error;
    write(",\"" "refId" "\":");
    if (Error error = serializeStdString(value.refId))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusAssetImage(std::vector<octopus::AssetImage> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::AssetImage>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::AssetImage const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusAssetImage(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusAssets(octopus::Assets const &value) {
    write("{\"" "fonts" "\":");
    if (Error error = serializeStdVectorOctopusAssetFont(value.fonts))
        return error;
    write(",\"" "images" "\":");
    if (Error error = serializeStdVectorOctopusAssetImage(value.images))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusComponentSet(octopus::ComponentSet const &value) {
    write("{\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    if (value.description.has_value()) {
        write(",\"" "description" "\":");
        if (Error error = serializeStdString(value.description.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdMapStdStringStdString(std::map<std::string, std::string> const &value) {
    bool prev = false;
    write('{');
    for (std::map<std::string, std::string>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { std::string const &key = i->first; std::string const &elem = i->second; if (prev) write(','); prev = true; if (Error error = serializeStdString(key)) return error; write(':'); if (Error error = serializeStdString(elem)) return error; }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusComponentVariantMeta(octopus::Component::VariantMeta const &value) {
    write("{\"" "of" "\":");
    if (Error error = serializeOctopusComponentSet(value.of))
        return error;
    write(",\"" "properties" "\":");
    if (Error error = serializeStdMapStdStringStdString(value.properties))
        return error;
    if (value.description.has_value()) {
        write(",\"" "description" "\":");
        if (Error error = serializeStdString(value.description.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusStatusValue(octopus::Status::Value const &value) {
    switch (value) {
        case octopus::Status::READY: write("\"READY\""); break;
        case octopus::Status::PENDING: write("\"PENDING\""); break;
        case octopus::Status::PROCESSING: write("\"PROCESSING\""); break;
        case octopus::Status::FAILED: write("\"FAILED\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeInt(int const &value) {
    writeSigned<unsigned>(value);
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorStdString(std::vector<std::string> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<std::string>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { std::string const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeStdString(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusStatusError(octopus::Status::Error const &value) {
    write("{\"" "code" "\":");
    if (Error error = serializeInt(value.code))
        return error;
    write(",\"" "message" "\":");
    if (Error error = serializeStdString(value.message))
        return error;
    write(",\"" "stacktrace" "\":");
    if (Error error = serializeStdVectorStdString(value.stacktrace))
        return error;
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusStatus(octopus::Status const &value) {
    write("{\"" "value" "\":");
    if (Error error = serializeOctopusStatusValue(value.value))
        return error;
    if (value.error.has_value()) {
        write(",\"" "error" "\":");
        if (Error error = serializeOctopusStatusError(value.error.value()))
            return error;
    }
    if (value.time.has_value()) {
        write(",\"" "time" "\":");
        if (Error error = serializeDouble(value.time.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusComponent(octopus::Component const &value) {
    write("{\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write(",\"" "role" "\":");
    if (Error error = serializeOctopusComponentRole(value.role))
        return error;
    write(",\"" "bounds" "\":");
    if (Error error = serializeOctopusBounds(value.bounds))
        return error;
    write(",\"" "dependencies" "\":");
    if (Error error = serializeStdVectorOctopusReference(value.dependencies))
        return error;
    write(",\"" "location" "\":");
    if (Error error = serializeOctopusResourceLocation(value.location))
        return error;
    write(",\"" "artifacts" "\":");
    if (Error error = serializeStdVectorOctopusArtifact(value.artifacts))
        return error;
    if (value.parentId.has_value()) {
        write(",\"" "parentId" "\":");
        if (Error error = serializeOctopusReference(value.parentId.value()))
            return error;
    }
    if (value.preview.has_value()) {
        write(",\"" "preview" "\":");
        if (Error error = serializeOctopusResourceLocation(value.preview.value()))
            return error;
    }
    if (value.assets.has_value()) {
        write(",\"" "assets" "\":");
        if (Error error = serializeOctopusAssets(value.assets.value()))
            return error;
    }
    if (value.variant.has_value()) {
        write(",\"" "variant" "\":");
        if (Error error = serializeOctopusComponentVariantMeta(value.variant.value()))
            return error;
    }
    if (value.description.has_value()) {
        write(",\"" "description" "\":");
        if (Error error = serializeStdString(value.description.value()))
            return error;
    }
    if (value.hash.has_value()) {
        write(",\"" "hash" "\":");
        if (Error error = serializeStdString(value.hash.value()))
            return error;
    }
    if (value.status.has_value()) {
        write(",\"" "status" "\":");
        if (Error error = serializeOctopusStatus(value.status.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusComponent(std::vector<octopus::Component> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::Component>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::Component const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusComponent(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusLibrary(octopus::Library const &value) {
    write("{\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write(",\"" "children" "\":");
    if (Error error = serializeStdVectorOctopusReference(value.children))
        return error;
    if (value.location.has_value()) {
        write(",\"" "location" "\":");
        if (Error error = serializeOctopusResourceLocation(value.location.value()))
            return error;
    }
    if (value.preview.has_value()) {
        write(",\"" "preview" "\":");
        if (Error error = serializeOctopusResourceLocation(value.preview.value()))
            return error;
    }
    if (value.assets.has_value()) {
        write(",\"" "assets" "\":");
        if (Error error = serializeOctopusAssets(value.assets.value()))
            return error;
    }
    if (value.description.has_value()) {
        write(",\"" "description" "\":");
        if (Error error = serializeStdString(value.description.value()))
            return error;
    }
    if (value.hash.has_value()) {
        write(",\"" "hash" "\":");
        if (Error error = serializeStdString(value.hash.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusLibrary(std::vector<octopus::Library> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::Library>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::Library const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusLibrary(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusChunkType(octopus::Chunk::Type const &value) {
    switch (value) {
        case octopus::Chunk::Type::STYLE_LAYER: write("\"STYLE_LAYER\""); break;
        case octopus::Chunk::Type::STYLE_FILL: write("\"STYLE_FILL\""); break;
        case octopus::Chunk::Type::STYLE_TEXT: write("\"STYLE_TEXT\""); break;
        case octopus::Chunk::Type::STYLE_EFFECT: write("\"STYLE_EFFECT\""); break;
        case octopus::Chunk::Type::STYLE_GRID: write("\"STYLE_GRID\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusChunk(octopus::Chunk const &value) {
    write("{\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write(",\"" "type" "\":");
    if (Error error = serializeOctopusChunkType(value.type))
        return error;
    write(",\"" "location" "\":");
    if (Error error = serializeOctopusResourceLocation(value.location))
        return error;
    write(",\"" "artifacts" "\":");
    if (Error error = serializeStdVectorOctopusArtifact(value.artifacts))
        return error;
    if (value.preview.has_value()) {
        write(",\"" "preview" "\":");
        if (Error error = serializeOctopusResourceLocation(value.preview.value()))
            return error;
    }
    if (value.assets.has_value()) {
        write(",\"" "assets" "\":");
        if (Error error = serializeOctopusAssets(value.assets.value()))
            return error;
    }
    if (value.description.has_value()) {
        write(",\"" "description" "\":");
        if (Error error = serializeStdString(value.description.value()))
            return error;
    }
    if (value.hash.has_value()) {
        write(",\"" "hash" "\":");
        if (Error error = serializeStdString(value.hash.value()))
            return error;
    }
    if (value.status.has_value()) {
        write(",\"" "status" "\":");
        if (Error error = serializeOctopusStatus(value.status.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeStdVectorOctopusChunk(std::vector<octopus::Chunk> const &value) {
    bool prev = false;
    write('[');
    for (std::vector<octopus::Chunk>::const_iterator i = value.begin(), end = value.end(); i != end; ++i) { octopus::Chunk const &elem = *i; if (prev) write(','); prev = true; if (Error error = serializeOctopusChunk(elem)) return error; }
    write(']');
    return Error::OK;
}

ManifestSerializer::Error ManifestSerializer::serializeOctopusOctopusManifest(octopus::OctopusManifest const &value) {
    write("{\"" "version" "\":");
    if (Error error = serializeStdString(value.version))
        return error;
    write(",\"" "origin" "\":");
    if (Error error = serializeOctopusOctopusManifestOrigin(value.origin))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write(",\"" "pages" "\":");
    if (Error error = serializeStdVectorOctopusPage(value.pages))
        return error;
    write(",\"" "components" "\":");
    if (Error error = serializeStdVectorOctopusComponent(value.components))
        return error;
    write(",\"" "libraries" "\":");
    if (Error error = serializeStdVectorOctopusLibrary(value.libraries))
        return error;
    write(",\"" "chunks" "\":");
    if (Error error = serializeStdVectorOctopusChunk(value.chunks))
        return error;
    write(",\"" "resourcesBase" "\":");
    if (Error error = serializeStdString(value.resourcesBase))
        return error;
    if (value.interactions.has_value()) {
        write(",\"" "interactions" "\":");
        if (Error error = serializeOctopusResourceLocation(value.interactions.value()))
            return error;
    }
    if (value.hash.has_value()) {
        write(",\"" "hash" "\":");
        if (Error error = serializeStdString(value.hash.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

}
