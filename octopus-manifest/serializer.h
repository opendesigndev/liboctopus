
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#pragma once

#include <nonstd/serialize_float.hpp>
#include "octopus-manifest.h"

namespace octopus {

class ManifestSerializer {

public:
    struct Error {
        enum Type {
            OK,
            UNREPRESENTABLE_FLOAT_VALUE,
            UNKNOWN_ENUM_VALUE
        } type;
        const void *datapoint;

        inline Error(Type type = Error::OK) : type(type), datapoint() { }
        inline Error(Type type, const void *datapoint) : type(type), datapoint(datapoint) { }
        operator Type() const;
        operator bool() const;
        const char *typeString() const;
    };

    static Error serialize(std::string &jsonString, const octopus::OctopusManifest &input);

protected:
    std::string &json;

    ManifestSerializer(std::string &json);
    void writeEscaped(char c);

    Error serializeStdString(const std::string &value);
    Error serializeOctopusOctopusManifestOrigin(const octopus::OctopusManifest::Origin &value);
    Error serializeOctopusReferenceType(const octopus::Reference::Type &value);
    Error serializeOctopusReference(const octopus::Reference &value);
    Error serializeStdVectorOctopusReference(const std::vector<octopus::Reference> &value);
    Error serializeOctopusPage(const octopus::Page &value);
    Error serializeStdVectorOctopusPage(const std::vector<octopus::Page> &value);
    Error serializeOctopusComponentRole(const octopus::Component::Role &value);
    Error serializeDouble(const double &value);
    Error serializeOctopusBounds(const octopus::Bounds &value);
    Error serializeOctopusResourceLocationType(const octopus::ResourceLocation::Type &value);
    Error serializeOctopusResourceLocation(const octopus::ResourceLocation &value);
    Error serializeOctopusArtifactType(const octopus::Artifact::Type &value);
    Error serializeOctopusArtifact(const octopus::Artifact &value);
    Error serializeStdVectorOctopusArtifact(const std::vector<octopus::Artifact> &value);
    Error serializeOctopusAssetFont(const octopus::AssetFont &value);
    Error serializeStdVectorOctopusAssetFont(const std::vector<octopus::AssetFont> &value);
    Error serializeOctopusAssetImage(const octopus::AssetImage &value);
    Error serializeStdVectorOctopusAssetImage(const std::vector<octopus::AssetImage> &value);
    Error serializeOctopusAssets(const octopus::Assets &value);
    Error serializeOctopusComponentSet(const octopus::ComponentSet &value);
    Error serializeStdMapStdStringStdString(const std::map<std::string, std::string> &value);
    Error serializeOctopusComponentVariantMeta(const octopus::Component::VariantMeta &value);
    Error serializeOctopusStatusValue(const octopus::Status::Value &value);
    Error serializeInt(const int &value);
    Error serializeStdVectorStdString(const std::vector<std::string> &value);
    Error serializeOctopusStatusError(const ::octopus::Status::Error &value);
    Error serializeOctopusStatus(const octopus::Status &value);
    Error serializeOctopusComponent(const octopus::Component &value);
    Error serializeStdVectorOctopusComponent(const std::vector<octopus::Component> &value);
    Error serializeOctopusLibrary(const octopus::Library &value);
    Error serializeStdVectorOctopusLibrary(const std::vector<octopus::Library> &value);
    Error serializeOctopusChunkType(const octopus::Chunk::Type &value);
    Error serializeOctopusChunk(const octopus::Chunk &value);
    Error serializeStdVectorOctopusChunk(const std::vector<octopus::Chunk> &value);
    Error serializeOctopusOctopusManifest(const octopus::OctopusManifest &value);

private:
    template <typename U, typename T>
    void writeSigned(T value);

};

}
