
#pragma once

#include "octopus-manifest.h"

namespace octopus {

// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

class ManifestSerializer {

public:
    enum ErrorType {
        OK,
        UNREPRESENTABLE_FLOAT_VALUE,
        UNKNOWN_ENUM_VALUE,
    };

    struct Error {
        ErrorType type;
        const void *datapoint;

        inline Error(ErrorType type = ErrorType::OK) : type(type), datapoint() { }
        inline Error(ErrorType type, const void *datapoint) : type(type), datapoint(datapoint) { }
        operator ErrorType() const;
        operator bool() const;
        const char *typeString() const;
    };

    static Error serialize(std::string &jsonString, octopus::OctopusManifest const &input);

protected:
    std::string &json;

    ManifestSerializer(std::string &json);
    void write(char c);
    void write(const char *str);
    void writeEscaped(char c);

    Error serializeStdString(std::string const &value);
    Error serializeOctopusOctopusManifestOrigin(octopus::OctopusManifest::Origin const &value);
    Error serializeOctopusReferenceType(octopus::Reference::Type const &value);
    Error serializeOctopusReference(octopus::Reference const &value);
    Error serializeStdVectorOctopusReference(std::vector<octopus::Reference> const &value);
    Error serializeOctopusPage(octopus::Page const &value);
    Error serializeStdVectorOctopusPage(std::vector<octopus::Page> const &value);
    Error serializeOctopusComponentRole(octopus::Component::Role const &value);
    Error serializeDouble(double const &value);
    Error serializeOctopusBounds(octopus::Bounds const &value);
    Error serializeOctopusResourceLocationType(octopus::ResourceLocation::Type const &value);
    Error serializeOctopusResourceLocation(octopus::ResourceLocation const &value);
    Error serializeOctopusArtifactType(octopus::Artifact::Type const &value);
    Error serializeOctopusArtifact(octopus::Artifact const &value);
    Error serializeStdVectorOctopusArtifact(std::vector<octopus::Artifact> const &value);
    Error serializeOctopusAssetFont(octopus::AssetFont const &value);
    Error serializeStdVectorOctopusAssetFont(std::vector<octopus::AssetFont> const &value);
    Error serializeOctopusAssetImage(octopus::AssetImage const &value);
    Error serializeStdVectorOctopusAssetImage(std::vector<octopus::AssetImage> const &value);
    Error serializeOctopusAssets(octopus::Assets const &value);
    Error serializeOctopusComponentSet(octopus::ComponentSet const &value);
    Error serializeStdMapStdStringStdString(std::map<std::string, std::string> const &value);
    Error serializeOctopusComponentVariantMeta(octopus::Component::VariantMeta const &value);
    Error serializeOctopusStatusValue(octopus::Status::Value const &value);
    Error serializeInt(int const &value);
    Error serializeStdVectorStdString(std::vector<std::string> const &value);
    Error serializeOctopusStatusError(octopus::Status::Error const &value);
    Error serializeOctopusStatus(octopus::Status const &value);
    Error serializeOctopusComponent(octopus::Component const &value);
    Error serializeStdVectorOctopusComponent(std::vector<octopus::Component> const &value);
    Error serializeOctopusLibrary(octopus::Library const &value);
    Error serializeStdVectorOctopusLibrary(std::vector<octopus::Library> const &value);
    Error serializeOctopusChunkType(octopus::Chunk::Type const &value);
    Error serializeOctopusChunk(octopus::Chunk const &value);
    Error serializeStdVectorOctopusChunk(std::vector<octopus::Chunk> const &value);
    Error serializeOctopusOctopusManifest(octopus::OctopusManifest const &value);

private:
    template <typename U, typename T>
    void writeSigned(T value);

};

}
