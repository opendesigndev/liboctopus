
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#include <cstdlib>
#include "parser.h"



#include <vector>
#include <cctype>
#include <algorithm>

inline int levenshtein(const std::string &a, const std::string &b) {
    size_t n = b.size()+1, m = 1, k = 0;
    while (m <= n)
        m <<= 1;
    std::vector<int> d(m--);
    d[k] = 0;
    for (size_t i = 0; i < b.size(); ++i)
        ++k, d[k] = d[k-1]+1;
    for (size_t i = 0; i < a.size(); ++i) {
        int aEmpty = 1;
        ++k, d[k&m] = d[(k-n)&m]+aEmpty;
        for (size_t j = 0; j < b.size(); ++j) {
            ++k, d[k&m] = std::min(std::min(
                d[(k-1)&m]+1,
                d[(k-n)&m]+aEmpty),
                d[(k-n-1)&m]+!(toupper(a[i]) == toupper(b[j]))
            );
        }
    }
    return d[k&m];
}

#ifndef JSON_CPP_MAX_INTEGER
#define JSON_CPP_MAX_INTEGER(T) ((T) ~(((T) ~(T) 0 <= (T) 0 ? -2 : 0)*((T) 1<<(8*sizeof(T)-2))))
#endif

namespace octopus {

Parser::Error::operator Parser::Error::Type() const {
    return type;
}

Parser::Error::operator bool() const {
    return type != Error::OK;
}

const char *Parser::Error::typeString() const {
    switch (type) {
        case Error::OK:
            return "OK";
        case Error::JSON_SYNTAX_ERROR:
            return "JSON_SYNTAX_ERROR";
        case Error::UNEXPECTED_END_OF_FILE:
            return "UNEXPECTED_END_OF_FILE";
        case Error::TYPE_MISMATCH:
            return "TYPE_MISMATCH";
        case Error::ARRAY_SIZE_MISMATCH:
            return "ARRAY_SIZE_MISMATCH";
        case Error::UNKNOWN_ENUM_VALUE:
            return "UNKNOWN_ENUM_VALUE";
        case Error::UNKNOWN_KEY:
            return "UNKNOWN_KEY";
        case Error::MISSING_KEY:
            return "MISSING_KEY";
        case Error::REPEATED_KEY:
            return "REPEATED_KEY";
        case Error::VALUE_OUT_OF_RANGE:
            return "VALUE_OUT_OF_RANGE";
        case Error::STRING_EXPECTED:
            return "STRING_EXPECTED";
        case Error::UTF16_ENCODING_ERROR:
            return "UTF16_ENCODING_ERROR";
    }
    return "";
}

Parser::Parser(const char *str) : cur(str) { }

void Parser::skipWhitespace() {
    while (*cur == ' ' || *cur == '\t' || *cur == '\r' || *cur == '\n')
        ++cur;
}

Parser::Error::Type Parser::skipValue() {
    skipWhitespace();
    switch (*cur) {
        case '\0':
            return Error::UNEXPECTED_END_OF_FILE;
        case '"':
            while (*++cur != '"') {
                if (!*(cur += *cur == '\\'))
                    return Error::UNEXPECTED_END_OF_FILE;
            }
            ++cur;
            return Error::OK;
        case '[': case '{':
            ++cur;
            for (int openBrackets = 1; openBrackets;) {
                switch (*cur) {
                    case '\0':
                        return Error::UNEXPECTED_END_OF_FILE;
                    case '"':
                        if (Error::Type error = skipValue())
                            return error;
                        continue;
                    case '[': case '{':
                        ++openBrackets;
                        break;
                    case ']': case '}':
                        --openBrackets;
                        break;
                }
                ++cur;
            }
            return Error::OK;
        default:
            if (isAlphanumeric(*cur) || *cur == '-' || *cur == '.') {
                while (isAlphanumeric(*++cur) || *cur == '+' || *cur == '-' || *cur == '.');
                return Error::OK;
            }
    }
    return Error::JSON_SYNTAX_ERROR;
}

bool Parser::matchSymbol(char s) {
    skipWhitespace();
    if (*cur == s) {
        ++cur;
        return true;
    }
    return false;
}

bool Parser::readHexQuad(int &value) {
    return (
        cur[0] && cur[1] && cur[2] && cur[3] &&
        (value = decodeHexDigit(cur[3])) >= 0 &&
        (value += 0x0010*decodeHexDigit(cur[2])) >= 0 &&
        (value += 0x0100*decodeHexDigit(cur[1])) >= 0 &&
        (value += 0x1000*decodeHexDigit(cur[0])) >= 0 &&
        (cur += 4, true)
    );
}

bool Parser::isAlphanumeric(char c) {
    switch (c) {
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G': case 'H': case 'I':
        case 'J': case 'K': case 'L': case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i':
        case 'j': case 'k': case 'l': case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
        case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            return true;
        default:
            return false;
    }
}

int Parser::decodeHexDigit(char digit) {
    switch (digit) {
        case '0': return 0x00;
        case '1': return 0x01;
        case '2': return 0x02;
        case '3': return 0x03;
        case '4': return 0x04;
        case '5': return 0x05;
        case '6': return 0x06;
        case '7': return 0x07;
        case '8': return 0x08;
        case '9': return 0x09;
        case 'A': case 'a': return 0x0a;
        case 'B': case 'b': return 0x0b;
        case 'C': case 'c': return 0x0c;
        case 'D': case 'd': return 0x0d;
        case 'E': case 'e': return 0x0e;
        case 'F': case 'f': return 0x0f;
    }
    return -1;
}

template <typename T>
Parser::Error::Type Parser::readSigned(T &value) {
    bool negative = *cur == '-' && (++cur, true);
    if (*cur >= '0' && *cur <= '9')
        value = *cur++-'0';
    else
        return Error::TYPE_MISMATCH;
    while (*cur >= '0' && *cur <= '9') {
        if (value < 0 || (value >= JSON_CPP_MAX_INTEGER(T)/10 && (value > JSON_CPP_MAX_INTEGER(T)/10 || (static_cast<T>(10*value+(*cur-'0')) < value && (!negative || *cur-'0' != (JSON_CPP_MAX_INTEGER(T)-9)%10)))))
            return Error::VALUE_OUT_OF_RANGE;
        value = static_cast<T>(10*value+(*cur++-'0'));
    }
    if (negative)
        value = -value;
    return Error::OK;
}

Parser::Error Parser::parse(octopus::Octopus &output, const char *jsonString) {
    Parser parser(jsonString);
    Error::Type error = parser.parseOctopusOctopus(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

Parser::Error Parser::parse(octopus::Layer &output, const char *jsonString) {
    Parser parser(jsonString);
    Error::Type error = parser.parseOctopusLayer(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

Parser::Error Parser::parse(octopus::LayerChange &output, const char *jsonString) {
    Parser parser(jsonString);
    Error::Type error = parser.parseOctopusLayerChange(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

Parser::Error::Type Parser::parseStdString(std::string &value) {
    if (!matchSymbol('"'))
        return Error::STRING_EXPECTED;
    value.clear();
    while (*cur != '"') {
        if (*cur == '\\') {
            ++cur;
            switch (*cur++) {
                case '\0':
                    --cur;
                    return Error::UNEXPECTED_END_OF_FILE;
                case 'B': case 'b': value.push_back('\b'); break;
                case 'F': case 'f': value.push_back('\f'); break;
                case 'N': case 'n': value.push_back('\n'); break;
                case 'R': case 'r': value.push_back('\r'); break;
                case 'T': case 't': value.push_back('\t'); break;
                case 'U': case 'u': {
                    unsigned long cp;
                    int wc;
                    if (!readHexQuad(wc))
                        return Error::JSON_SYNTAX_ERROR;
                    if ((wc&0xfc00) == 0xd800) {
                        if (!(cur[0] == '\\' && (cur[1] == 'u' || cur[1] == 'U')))
                            return Error::UTF16_ENCODING_ERROR;
                        cp = (unsigned long) ((wc&0x03ff)<<10);
                        cur += 2;
                        if (!readHexQuad(wc))
                            return Error::JSON_SYNTAX_ERROR;
                        if ((wc&0xfc00) != 0xdc00)
                            return Error::UTF16_ENCODING_ERROR;
                        cp = 0x010000+(cp|(unsigned long) (wc&0x03ff));
                    } else
                        cp = (unsigned long) wc;
                    if (cp&0xffffff80) {
                        int len;
                        for (len = 1; cp>>(5*len+1) && len < 6; ++len);
                        value.push_back((char) (0xff<<(8-len)|cp>>6*(len-1)));
                        for (int i = 1; i < len; ++i)
                            value.push_back((char) (0x80|(cp>>6*(len-i-1)&0x3f)));
                    } else
                        value.push_back((char) cp);
                    break;
                }
                default:
                    value.push_back(cur[-1]);
            }
            continue;
        }
        if (!*cur)
            return Error::UNEXPECTED_END_OF_FILE;
        value.push_back(*cur);
        ++cur;
    }
    ++cur;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusBlendMode(octopus::BlendMode &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "NORMAL");
    if (curDistance < bestDistance) value = octopus::BlendMode::NORMAL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "PASS_THROUGH");
    if (curDistance < bestDistance) value = octopus::BlendMode::PASS_THROUGH, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "COLOR");
    if (curDistance < bestDistance) value = octopus::BlendMode::COLOR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "COLOR_BURN");
    if (curDistance < bestDistance) value = octopus::BlendMode::COLOR_BURN, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "COLOR_DODGE");
    if (curDistance < bestDistance) value = octopus::BlendMode::COLOR_DODGE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DARKEN");
    if (curDistance < bestDistance) value = octopus::BlendMode::DARKEN, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DARKER_COLOR");
    if (curDistance < bestDistance) value = octopus::BlendMode::DARKER_COLOR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DIFFERENCE");
    if (curDistance < bestDistance) value = octopus::BlendMode::DIFFERENCE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DIVIDE");
    if (curDistance < bestDistance) value = octopus::BlendMode::DIVIDE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "EXCLUSION");
    if (curDistance < bestDistance) value = octopus::BlendMode::EXCLUSION, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "HARD_LIGHT");
    if (curDistance < bestDistance) value = octopus::BlendMode::HARD_LIGHT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "HARD_MIX");
    if (curDistance < bestDistance) value = octopus::BlendMode::HARD_MIX, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "HUE");
    if (curDistance < bestDistance) value = octopus::BlendMode::HUE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LIGHTEN");
    if (curDistance < bestDistance) value = octopus::BlendMode::LIGHTEN, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LIGHTER_COLOR");
    if (curDistance < bestDistance) value = octopus::BlendMode::LIGHTER_COLOR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LINEAR_BURN");
    if (curDistance < bestDistance) value = octopus::BlendMode::LINEAR_BURN, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LINEAR_DODGE");
    if (curDistance < bestDistance) value = octopus::BlendMode::LINEAR_DODGE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LINEAR_LIGHT");
    if (curDistance < bestDistance) value = octopus::BlendMode::LINEAR_LIGHT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LUMINOSITY");
    if (curDistance < bestDistance) value = octopus::BlendMode::LUMINOSITY, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "MULTIPLY");
    if (curDistance < bestDistance) value = octopus::BlendMode::MULTIPLY, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "OVERLAY");
    if (curDistance < bestDistance) value = octopus::BlendMode::OVERLAY, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "PIN_LIGHT");
    if (curDistance < bestDistance) value = octopus::BlendMode::PIN_LIGHT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SATURATION");
    if (curDistance < bestDistance) value = octopus::BlendMode::SATURATION, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SCREEN");
    if (curDistance < bestDistance) value = octopus::BlendMode::SCREEN, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SOFT_LIGHT");
    if (curDistance < bestDistance) value = octopus::BlendMode::SOFT_LIGHT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SUBTRACT");
    if (curDistance < bestDistance) value = octopus::BlendMode::SUBTRACT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "VIVID_LIGHT");
    if (curDistance < bestDistance) value = octopus::BlendMode::VIVID_LIGHT, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdString(nonstd::optional<std::string> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdString((value = std::string()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseDouble(double &value) {
    char *end;
    value = strtod(cur, &end);
    if (end == cur)
        return Error::TYPE_MISMATCH;
    cur = end;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusVec2(octopus::Vec2 &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'x':
                    if (buffer == "x") {
                        if (Error error = parseDouble(value.x))
                            return error;
                        continue;
                    }
                    break;
                case 'y':
                    if (buffer == "y") {
                        if (Error error = parseDouble(value.y))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusColor(octopus::Color &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'a':
                    if (buffer == "a") {
                        if (Error error = parseDouble(value.a))
                            return error;
                        continue;
                    }
                    break;
                case 'b':
                    if (buffer == "b") {
                        if (Error error = parseDouble(value.b))
                            return error;
                        continue;
                    }
                    break;
                case 'g':
                    if (buffer == "g") {
                        if (Error error = parseDouble(value.g))
                            return error;
                        continue;
                    }
                    break;
                case 'r':
                    if (buffer == "r") {
                        if (Error error = parseDouble(value.r))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusShadow(octopus::Shadow &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 1) {
            switch (buffer[1]) {
                case 'f':
                    if (buffer == "offset") {
                        if (Error error = parseOctopusVec2(value.offset))
                            return error;
                        continue;
                    }
                    break;
                case 'h':
                    if (buffer == "choke") {
                        if (Error error = parseDouble(value.choke))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "blur") {
                        if (Error error = parseDouble(value.blur))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    if (buffer == "color") {
                        if (Error error = parseOctopusColor(value.color))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusShadow(nonstd::optional<octopus::Shadow> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusShadow((value = octopus::Shadow()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusColor(nonstd::optional<octopus::Color> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusColor((value = octopus::Color()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalDouble(nonstd::optional<double> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseDouble((value = double()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusColorAdjustment(octopus::ColorAdjustment &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 1) {
            switch (buffer[1]) {
                case 'a':
                    if (buffer == "saturation") {
                        if (Error error = parseDouble(value.saturation))
                            return error;
                        continue;
                    }
                    break;
                case 'e':
                    if (buffer == "temperature") {
                        if (Error error = parseDouble(value.temperature))
                            return error;
                        continue;
                    }
                    break;
                case 'h':
                    if (buffer == "shadows") {
                        if (Error error = parseDouble(value.shadows))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    switch (buffer.size()) {
                        case 4:
                            if (buffer == "tint") {
                                if (Error error = parseDouble(value.tint))
                                    return error;
                                continue;
                            }
                            break;
                        case 10:
                            if (buffer == "highlights") {
                                if (Error error = parseDouble(value.highlights))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'o':
                    if (buffer == "contrast") {
                        if (Error error = parseDouble(value.contrast))
                            return error;
                        continue;
                    }
                    break;
                case 'r':
                    if (buffer == "brightness") {
                        if (Error error = parseDouble(value.brightness))
                            return error;
                        continue;
                    }
                    break;
                case 'u':
                    if (buffer == "hue") {
                        if (Error error = parseDouble(value.hue))
                            return error;
                        continue;
                    }
                    break;
                case 'x':
                    if (buffer == "exposure") {
                        if (Error error = parseDouble(value.exposure))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusColorAdjustment(nonstd::optional<octopus::ColorAdjustment> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusColorAdjustment((value = octopus::ColorAdjustment()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFilterType(octopus::Filter::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "OPACITY_MULTIPLIER");
    if (curDistance < bestDistance) value = octopus::Filter::Type::OPACITY_MULTIPLIER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "XD_BRIGHTNESS_ADJUSTMENT");
    if (curDistance < bestDistance) value = octopus::Filter::Type::XD_BRIGHTNESS_ADJUSTMENT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SKETCH_BRIGHTNESS_ADJUSTMENT");
    if (curDistance < bestDistance) value = octopus::Filter::Type::SKETCH_BRIGHTNESS_ADJUSTMENT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SKETCH_COLOR_ADJUSTMENT");
    if (curDistance < bestDistance) value = octopus::Filter::Type::SKETCH_COLOR_ADJUSTMENT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FIGMA_COLOR_ADJUSTMENT");
    if (curDistance < bestDistance) value = octopus::Filter::Type::FIGMA_COLOR_ADJUSTMENT, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseBool(bool &value) {
    skipWhitespace();
    if (cur[0] == 'f' && cur[1] == 'a' && cur[2] == 'l' && cur[3] == 's' && cur[4] == 'e' && !isAlphanumeric(cur[5]) && cur[5] != '_' && (cur += 5, true))
        value = false;
    else if (cur[0] == 't' && cur[1] == 'r' && cur[2] == 'u' && cur[3] == 'e' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value = true;
    else
        return Error::TYPE_MISMATCH;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFilter(octopus::Filter &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'b':
                    if (buffer == "brightness") {
                        if (Error error = parseNonstdOptionalDouble(value.brightness))
                            return error;
                        continue;
                    }
                    break;
                case 'c':
                    if (buffer == "colorAdjustment") {
                        if (Error error = parseNonstdOptionalOctopusColorAdjustment(value.colorAdjustment))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    if (buffer == "opacity") {
                        if (Error error = parseNonstdOptionalDouble(value.opacity))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "type") {
                        if (Error error = parseOctopusFilterType(value.type))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "visible") {
                        if (Error error = parseBool(value.visible))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusFilter(std::vector<octopus::Filter> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusFilter((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusFilter(nonstd::optional<std::vector<octopus::Filter> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusFilter((value = std::vector<octopus::Filter>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusGradientType(octopus::Gradient::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "LINEAR");
    if (curDistance < bestDistance) value = octopus::Gradient::Type::LINEAR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "RADIAL");
    if (curDistance < bestDistance) value = octopus::Gradient::Type::RADIAL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "ANGULAR");
    if (curDistance < bestDistance) value = octopus::Gradient::Type::ANGULAR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DIAMOND");
    if (curDistance < bestDistance) value = octopus::Gradient::Type::DIAMOND, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusGradientInterpolation(octopus::Gradient::Interpolation &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "LINEAR");
    if (curDistance < bestDistance) value = octopus::Gradient::Interpolation::LINEAR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "POWER");
    if (curDistance < bestDistance) value = octopus::Gradient::Interpolation::POWER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "REVERSE_POWER");
    if (curDistance < bestDistance) value = octopus::Gradient::Interpolation::REVERSE_POWER, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusGradientColorStop(octopus::Gradient::ColorStop &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 5:
                if (buffer == "color") {
                    if (Error error = parseOctopusColor(value.color))
                        return error;
                    continue;
                }
                break;
            case 8:
                if (buffer == "position") {
                    if (Error error = parseDouble(value.position))
                        return error;
                    continue;
                }
                break;
            case 13:
                if (buffer == "interpolation") {
                    if (Error error = parseOctopusGradientInterpolation(value.interpolation))
                        return error;
                    continue;
                }
                break;
            case 22:
                if (buffer == "interpolationParameter") {
                    if (Error error = parseNonstdOptionalDouble(value.interpolationParameter))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusGradientColorStop(std::vector<octopus::Gradient::ColorStop> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusGradientColorStop((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusGradient(octopus::Gradient &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "type") {
                    if (Error error = parseOctopusGradientType(value.type))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "stops") {
                    if (Error error = parseStdVectorOctopusGradientColorStop(value.stops))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusGradient(nonstd::optional<octopus::Gradient> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusGradient((value = octopus::Gradient()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusImageRefType(octopus::ImageRef::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "PATH");
    if (curDistance < bestDistance) value = octopus::ImageRef::Type::PATH, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "RESOURCE_REF");
    if (curDistance < bestDistance) value = octopus::ImageRef::Type::RESOURCE_REF, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusImageRef(octopus::ImageRef &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "type") {
                    if (Error error = parseOctopusImageRefType(value.type))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "value") {
                    if (Error error = parseStdString(value.value))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusRectangle(octopus::Rectangle &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'x':
                    if (buffer.size() > 1) {
                        switch (buffer[1]) {
                            case '0':
                                if (buffer == "x0") {
                                    if (Error error = parseDouble(value.x0))
                                        return error;
                                    continue;
                                }
                                break;
                            case '1':
                                if (buffer == "x1") {
                                    if (Error error = parseDouble(value.x1))
                                        return error;
                                    continue;
                                }
                                break;
                        }
                    }
                    break;
                case 'y':
                    if (buffer.size() > 1) {
                        switch (buffer[1]) {
                            case '0':
                                if (buffer == "y0") {
                                    if (Error error = parseDouble(value.y0))
                                        return error;
                                    continue;
                                }
                                break;
                            case '1':
                                if (buffer == "y1") {
                                    if (Error error = parseDouble(value.y1))
                                        return error;
                                    continue;
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusRectangle(nonstd::optional<octopus::Rectangle> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusRectangle((value = octopus::Rectangle()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusImage(octopus::Image &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 3:
                if (buffer == "ref") {
                    if (Error error = parseOctopusImageRef(value.ref))
                        return error;
                    continue;
                }
                break;
            case 10:
                if (buffer == "subsection") {
                    if (Error error = parseNonstdOptionalOctopusRectangle(value.subsection))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusImage(nonstd::optional<octopus::Image> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusImage((value = octopus::Image()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFillPositioningLayout(octopus::Fill::Positioning::Layout &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "STRETCH");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Layout::STRETCH, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FILL");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Layout::FILL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FIT");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Layout::FIT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "TILE");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Layout::TILE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFillPositioningOrigin(octopus::Fill::Positioning::Origin &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "LAYER");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Origin::LAYER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "PARENT");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Origin::PARENT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "COMPONENT");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Origin::COMPONENT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "ARTBOARD");
    if (curDistance < bestDistance) value = octopus::Fill::Positioning::Origin::ARTBOARD, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseDouble_6(double value[6]) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    int i = 0;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (i == 6)
            return Error::ARRAY_SIZE_MISMATCH;
        if (Error::Type error = parseDouble(value[i++]))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    if (i != 6)
        return Error::ARRAY_SIZE_MISMATCH;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFillPositioning(octopus::Fill::Positioning &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'l':
                    if (buffer == "layout") {
                        if (Error error = parseOctopusFillPositioningLayout(value.layout))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    if (buffer == "origin") {
                        if (Error error = parseOctopusFillPositioningOrigin(value.origin))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "transform") {
                        if (Error error = parseDouble_6(value.transform))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusFillPositioning(nonstd::optional<octopus::Fill::Positioning> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusFillPositioning((value = octopus::Fill::Positioning()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFillType(octopus::Fill::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "COLOR");
    if (curDistance < bestDistance) value = octopus::Fill::Type::COLOR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "GRADIENT");
    if (curDistance < bestDistance) value = octopus::Fill::Type::GRADIENT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "IMAGE");
    if (curDistance < bestDistance) value = octopus::Fill::Type::IMAGE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFill(octopus::Fill &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'b':
                    if (buffer == "blendMode") {
                        if (Error error = parseOctopusBlendMode(value.blendMode))
                            return error;
                        continue;
                    }
                    break;
                case 'c':
                    if (buffer == "color") {
                        if (Error error = parseNonstdOptionalOctopusColor(value.color))
                            return error;
                        continue;
                    }
                    break;
                case 'f':
                    if (buffer == "filters") {
                        if (Error error = parseNonstdOptionalStdVectorOctopusFilter(value.filters))
                            return error;
                        continue;
                    }
                    break;
                case 'g':
                    if (buffer == "gradient") {
                        if (Error error = parseNonstdOptionalOctopusGradient(value.gradient))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "image") {
                        if (Error error = parseNonstdOptionalOctopusImage(value.image))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "positioning") {
                        if (Error error = parseNonstdOptionalOctopusFillPositioning(value.positioning))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "type") {
                        if (Error error = parseOctopusFillType(value.type))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "visible") {
                        if (Error error = parseBool(value.visible))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusFill(nonstd::optional<octopus::Fill> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusFill((value = octopus::Fill()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusEffectType(octopus::Effect::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "OVERLAY");
    if (curDistance < bestDistance) value = octopus::Effect::Type::OVERLAY, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "STROKE");
    if (curDistance < bestDistance) value = octopus::Effect::Type::STROKE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DROP_SHADOW");
    if (curDistance < bestDistance) value = octopus::Effect::Type::DROP_SHADOW, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "INNER_SHADOW");
    if (curDistance < bestDistance) value = octopus::Effect::Type::INNER_SHADOW, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "OUTER_GLOW");
    if (curDistance < bestDistance) value = octopus::Effect::Type::OUTER_GLOW, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "INNER_GLOW");
    if (curDistance < bestDistance) value = octopus::Effect::Type::INNER_GLOW, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "GAUSSIAN_BLUR");
    if (curDistance < bestDistance) value = octopus::Effect::Type::GAUSSIAN_BLUR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BOUNDED_BLUR");
    if (curDistance < bestDistance) value = octopus::Effect::Type::BOUNDED_BLUR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BLUR");
    if (curDistance < bestDistance) value = octopus::Effect::Type::BLUR, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "OTHER");
    if (curDistance < bestDistance) value = octopus::Effect::Type::OTHER, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusStrokePosition(octopus::Stroke::Position &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "OUTSIDE");
    if (curDistance < bestDistance) value = octopus::Stroke::Position::OUTSIDE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "CENTER");
    if (curDistance < bestDistance) value = octopus::Stroke::Position::CENTER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "INSIDE");
    if (curDistance < bestDistance) value = octopus::Stroke::Position::INSIDE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusStroke(octopus::Stroke &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "fill") {
                    if (Error error = parseOctopusFill(value.fill))
                        return error;
                    continue;
                }
                break;
            case 8:
                if (buffer == "position") {
                    if (Error error = parseOctopusStrokePosition(value.position))
                        return error;
                    continue;
                }
                break;
            case 9:
                if (buffer == "thickness") {
                    if (Error error = parseDouble(value.thickness))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusStroke(nonstd::optional<octopus::Stroke> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusStroke((value = octopus::Stroke()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusEffectBasis(octopus::EffectBasis &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "BODY");
    if (curDistance < bestDistance) value = octopus::EffectBasis::BODY, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BODY_AND_STROKES");
    if (curDistance < bestDistance) value = octopus::EffectBasis::BODY_AND_STROKES, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FILL");
    if (curDistance < bestDistance) value = octopus::EffectBasis::FILL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LAYER_AND_EFFECTS");
    if (curDistance < bestDistance) value = octopus::EffectBasis::LAYER_AND_EFFECTS, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BACKGROUND");
    if (curDistance < bestDistance) value = octopus::EffectBasis::BACKGROUND, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusEffect(octopus::Effect &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 2) {
            switch (buffer[2]) {
                case 'a':
                    if (buffer == "shadow") {
                        if (Error error = parseNonstdOptionalOctopusShadow(value.shadow))
                            return error;
                        continue;
                    }
                    break;
                case 'e':
                    switch (buffer.size()) {
                        case 7:
                            if (buffer == "overlay") {
                                if (Error error = parseNonstdOptionalOctopusFill(value.overlay))
                                    return error;
                                continue;
                            }
                            break;
                        case 9:
                            if (buffer == "blendMode") {
                                if (Error error = parseOctopusBlendMode(value.blendMode))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'l':
                    if (buffer == "filters") {
                        if (Error error = parseNonstdOptionalStdVectorOctopusFilter(value.filters))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    if (buffer == "glow") {
                        if (Error error = parseNonstdOptionalOctopusShadow(value.glow))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "type") {
                        if (Error error = parseOctopusEffectType(value.type))
                            return error;
                        continue;
                    }
                    break;
                case 'r':
                    if (buffer == "stroke") {
                        if (Error error = parseNonstdOptionalOctopusStroke(value.stroke))
                            return error;
                        continue;
                    }
                    break;
                case 's':
                    switch (buffer.size()) {
                        case 5:
                            if (buffer == "basis") {
                                if (Error error = parseOctopusEffectBasis(value.basis))
                                    return error;
                                continue;
                            }
                            break;
                        case 7:
                            if (buffer == "visible") {
                                if (Error error = parseBool(value.visible))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'u':
                    if (buffer == "blur") {
                        if (Error error = parseNonstdOptionalDouble(value.blur))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusEffect(std::vector<octopus::Effect> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusEffect((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdListOctopusLayer(std::list<octopus::Layer> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusLayer((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdListOctopusLayer(nonstd::optional<std::list<octopus::Layer> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdListOctopusLayer((value = std::list<octopus::Layer>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusMaskBasis(octopus::MaskBasis &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "SOLID");
    if (curDistance < bestDistance) value = octopus::MaskBasis::SOLID, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BODY");
    if (curDistance < bestDistance) value = octopus::MaskBasis::BODY, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BODY_EMBED");
    if (curDistance < bestDistance) value = octopus::MaskBasis::BODY_EMBED, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FILL");
    if (curDistance < bestDistance) value = octopus::MaskBasis::FILL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FILL_EMBED");
    if (curDistance < bestDistance) value = octopus::MaskBasis::FILL_EMBED, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LAYER_AND_EFFECTS");
    if (curDistance < bestDistance) value = octopus::MaskBasis::LAYER_AND_EFFECTS, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusMaskBasis(nonstd::optional<octopus::MaskBasis> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusMaskBasis((value = octopus::MaskBasis()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdArrayDouble5(std::array<double, 5> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    int i = 0;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (i == 5)
            return Error::ARRAY_SIZE_MISMATCH;
        if (Error::Type error = parseDouble(value[i]))
            return error;
        ++i;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    if (i != 5)
        return Error::ARRAY_SIZE_MISMATCH;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdArrayDouble5(nonstd::optional<std::array<double, 5> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdArrayDouble5((value = std::array<double, 5>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorStdString(std::vector<std::string> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusLayerChangeOp(octopus::LayerChange::Op &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "PROPERTY_CHANGE");
    if (curDistance < bestDistance) value = octopus::LayerChange::Op::PROPERTY_CHANGE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "INSERT");
    if (curDistance < bestDistance) value = octopus::LayerChange::Op::INSERT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "REPLACE");
    if (curDistance < bestDistance) value = octopus::LayerChange::Op::REPLACE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "REMOVE");
    if (curDistance < bestDistance) value = octopus::LayerChange::Op::REMOVE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseInt(int &value) {
    skipWhitespace();
    return readSigned(value);
}

Parser::Error::Type Parser::parseNonstdOptionalInt(nonstd::optional<int> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseInt((value = int()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusEffectBasis(nonstd::optional<octopus::EffectBasis> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusEffectBasis((value = octopus::EffectBasis()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusBlendMode(nonstd::optional<octopus::BlendMode> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusBlendMode((value = octopus::BlendMode()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalBool(nonstd::optional<bool> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseBool((value = bool()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusFont(octopus::Font &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 5:
                if (buffer == "style") {
                    if (Error error = parseNonstdOptionalStdString(value.style))
                        return error;
                    continue;
                }
                break;
            case 6:
                if (buffer == "family") {
                    if (Error error = parseNonstdOptionalStdString(value.family))
                        return error;
                    continue;
                }
                break;
            case 14:
                if (buffer == "postScriptName") {
                    if (Error error = parseStdString(value.postScriptName))
                        return error;
                    continue;
                }
                break;
            case 23:
                if (buffer == "syntheticPostScriptName") {
                    if (Error error = parseNonstdOptionalBool(value.syntheticPostScriptName))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusFont(nonstd::optional<octopus::Font> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusFont((value = octopus::Font()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusFill(std::vector<octopus::Fill> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusFill((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusFill(nonstd::optional<std::vector<octopus::Fill> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusFill((value = std::vector<octopus::Fill>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorDouble(std::vector<double> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseDouble((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorDouble(nonstd::optional<std::vector<double> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorDouble((value = std::vector<double>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusVectorStrokeLineCap(octopus::VectorStroke::LineCap &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "BUTT");
    if (curDistance < bestDistance) value = octopus::VectorStroke::LineCap::BUTT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "ROUND");
    if (curDistance < bestDistance) value = octopus::VectorStroke::LineCap::ROUND, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SQUARE");
    if (curDistance < bestDistance) value = octopus::VectorStroke::LineCap::SQUARE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusVectorStrokeLineCap(nonstd::optional<octopus::VectorStroke::LineCap> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusVectorStrokeLineCap((value = octopus::VectorStroke::LineCap()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusVectorStrokeLineJoin(octopus::VectorStroke::LineJoin &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "MITER");
    if (curDistance < bestDistance) value = octopus::VectorStroke::LineJoin::MITER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "ROUND");
    if (curDistance < bestDistance) value = octopus::VectorStroke::LineJoin::ROUND, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BEVEL");
    if (curDistance < bestDistance) value = octopus::VectorStroke::LineJoin::BEVEL, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusVectorStrokeLineJoin(nonstd::optional<octopus::VectorStroke::LineJoin> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusVectorStrokeLineJoin((value = octopus::VectorStroke::LineJoin()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusVectorStrokeStyle(octopus::VectorStroke::Style &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "SOLID");
    if (curDistance < bestDistance) value = octopus::VectorStroke::Style::SOLID, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DASHED");
    if (curDistance < bestDistance) value = octopus::VectorStroke::Style::DASHED, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DOTTED");
    if (curDistance < bestDistance) value = octopus::VectorStroke::Style::DOTTED, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusVectorStrokeStyle(nonstd::optional<octopus::VectorStroke::Style> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusVectorStrokeStyle((value = octopus::VectorStroke::Style()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusVectorStroke(octopus::VectorStroke &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'd':
                    switch (buffer.size()) {
                        case 7:
                            if (buffer == "dashing") {
                                if (Error error = parseNonstdOptionalStdVectorDouble(value.dashing))
                                    return error;
                                continue;
                            }
                            break;
                        case 10:
                            if (buffer == "dashOffset") {
                                if (Error error = parseNonstdOptionalDouble(value.dashOffset))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'f':
                    if (buffer == "fill") {
                        if (Error error = parseOctopusFill(value.fill))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    switch (buffer.size()) {
                        case 7:
                            if (buffer == "lineCap") {
                                if (Error error = parseNonstdOptionalOctopusVectorStrokeLineCap(value.lineCap))
                                    return error;
                                continue;
                            }
                            break;
                        case 8:
                            if (buffer == "lineJoin") {
                                if (Error error = parseNonstdOptionalOctopusVectorStrokeLineJoin(value.lineJoin))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'm':
                    if (buffer == "miterLimit") {
                        if (Error error = parseNonstdOptionalDouble(value.miterLimit))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "position") {
                        if (Error error = parseOctopusStrokePosition(value.position))
                            return error;
                        continue;
                    }
                    break;
                case 's':
                    if (buffer == "style") {
                        if (Error error = parseNonstdOptionalOctopusVectorStrokeStyle(value.style))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "thickness") {
                        if (Error error = parseDouble(value.thickness))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "visible") {
                        if (Error error = parseBool(value.visible))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusVectorStroke(std::vector<octopus::VectorStroke> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusVectorStroke((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusVectorStroke(nonstd::optional<std::vector<octopus::VectorStroke> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusVectorStroke((value = std::vector<octopus::VectorStroke>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusOpenTypeFeature(octopus::OpenTypeFeature &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 3:
                if (buffer == "tag") {
                    if (Error error = parseStdString(value.tag))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "value") {
                    if (Error error = parseInt(value.value))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusOpenTypeFeature(std::vector<octopus::OpenTypeFeature> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusOpenTypeFeature((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusOpenTypeFeature(nonstd::optional<std::vector<octopus::OpenTypeFeature> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusOpenTypeFeature((value = std::vector<octopus::OpenTypeFeature>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextStyleLigatures(octopus::TextStyle::Ligatures &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "NONE");
    if (curDistance < bestDistance) value = octopus::TextStyle::Ligatures::NONE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "STANDARD");
    if (curDistance < bestDistance) value = octopus::TextStyle::Ligatures::STANDARD, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "ALL");
    if (curDistance < bestDistance) value = octopus::TextStyle::Ligatures::ALL, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusTextStyleLigatures(nonstd::optional<octopus::TextStyle::Ligatures> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusTextStyleLigatures((value = octopus::TextStyle::Ligatures()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextStyleUnderline(octopus::TextStyle::Underline &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "NONE");
    if (curDistance < bestDistance) value = octopus::TextStyle::Underline::NONE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SINGLE");
    if (curDistance < bestDistance) value = octopus::TextStyle::Underline::SINGLE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "DOUBLE");
    if (curDistance < bestDistance) value = octopus::TextStyle::Underline::DOUBLE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusTextStyleUnderline(nonstd::optional<octopus::TextStyle::Underline> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusTextStyleUnderline((value = octopus::TextStyle::Underline()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextStyleLetterCase(octopus::TextStyle::LetterCase &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "NONE");
    if (curDistance < bestDistance) value = octopus::TextStyle::LetterCase::NONE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "UPPERCASE");
    if (curDistance < bestDistance) value = octopus::TextStyle::LetterCase::UPPERCASE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "LOWERCASE");
    if (curDistance < bestDistance) value = octopus::TextStyle::LetterCase::LOWERCASE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SMALL_CAPS");
    if (curDistance < bestDistance) value = octopus::TextStyle::LetterCase::SMALL_CAPS, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "TITLE_CASE");
    if (curDistance < bestDistance) value = octopus::TextStyle::LetterCase::TITLE_CASE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusTextStyleLetterCase(nonstd::optional<octopus::TextStyle::LetterCase> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusTextStyleLetterCase((value = octopus::TextStyle::LetterCase()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextStyle(octopus::TextStyle &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "font") {
                    if (Error error = parseNonstdOptionalOctopusFont(value.font))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "fills") {
                    if (Error error = parseNonstdOptionalStdVectorOctopusFill(value.fills))
                        return error;
                    continue;
                }
                break;
            case 7:
                switch (buffer[0]) {
                    case 'k':
                        if (buffer == "kerning") {
                            if (Error error = parseNonstdOptionalBool(value.kerning))
                                return error;
                            continue;
                        }
                        break;
                    case 's':
                        if (buffer == "strokes") {
                            if (Error error = parseNonstdOptionalStdVectorOctopusVectorStroke(value.strokes))
                                return error;
                            continue;
                        }
                        break;
                }
                break;
            case 8:
                switch (buffer[1]) {
                    case 'e':
                        if (buffer == "features") {
                            if (Error error = parseNonstdOptionalStdVectorOctopusOpenTypeFeature(value.features))
                                return error;
                            continue;
                        }
                        break;
                    case 'o':
                        if (buffer == "fontSize") {
                            if (Error error = parseNonstdOptionalDouble(value.fontSize))
                                return error;
                            continue;
                        }
                        break;
                }
                break;
            case 9:
                switch (buffer[0]) {
                    case 'l':
                        if (buffer == "ligatures") {
                            if (Error error = parseNonstdOptionalOctopusTextStyleLigatures(value.ligatures))
                                return error;
                            continue;
                        }
                        break;
                    case 'u':
                        if (buffer == "underline") {
                            if (Error error = parseNonstdOptionalOctopusTextStyleUnderline(value.underline))
                                return error;
                            continue;
                        }
                        break;
                }
                break;
            case 10:
                switch (buffer[1]) {
                    case 'e':
                        if (buffer == "letterCase") {
                            if (Error error = parseNonstdOptionalOctopusTextStyleLetterCase(value.letterCase))
                                return error;
                            continue;
                        }
                        break;
                    case 'i':
                        if (buffer == "lineHeight") {
                            if (Error error = parseNonstdOptionalDouble(value.lineHeight))
                                return error;
                            continue;
                        }
                        break;
                }
                break;
            case 11:
                if (buffer == "linethrough") {
                    if (Error error = parseNonstdOptionalBool(value.linethrough))
                        return error;
                    continue;
                }
                break;
            case 13:
                if (buffer == "letterSpacing") {
                    if (Error error = parseNonstdOptionalDouble(value.letterSpacing))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusTextStyle(nonstd::optional<octopus::TextStyle> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusTextStyle((value = octopus::TextStyle()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusEffect(nonstd::optional<octopus::Effect> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusEffect((value = octopus::Effect()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusEffect(nonstd::optional<std::vector<octopus::Effect> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusEffect((value = std::vector<octopus::Effect>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusFilter(nonstd::optional<octopus::Filter> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusFilter((value = octopus::Filter()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusShapeFillRule(octopus::Shape::FillRule &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "EVEN_ODD");
    if (curDistance < bestDistance) value = octopus::Shape::FillRule::EVEN_ODD, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "NON_ZERO");
    if (curDistance < bestDistance) value = octopus::Shape::FillRule::NON_ZERO, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusShapeFillRule(nonstd::optional<octopus::Shape::FillRule> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusShapeFillRule((value = octopus::Shape::FillRule()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusPathOp(octopus::Path::Op &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "UNION");
    if (curDistance < bestDistance) value = octopus::Path::Op::UNION, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "INTERSECT");
    if (curDistance < bestDistance) value = octopus::Path::Op::INTERSECT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SUBTRACT");
    if (curDistance < bestDistance) value = octopus::Path::Op::SUBTRACT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "EXCLUDE");
    if (curDistance < bestDistance) value = octopus::Path::Op::EXCLUDE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusPathOp(nonstd::optional<octopus::Path::Op> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusPathOp((value = octopus::Path::Op()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusPathType(octopus::Path::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "PATH");
    if (curDistance < bestDistance) value = octopus::Path::Type::PATH, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "RECTANGLE");
    if (curDistance < bestDistance) value = octopus::Path::Type::RECTANGLE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "COMPOUND");
    if (curDistance < bestDistance) value = octopus::Path::Type::COMPOUND, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusPath(std::vector<octopus::Path> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusPath((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusPath(nonstd::optional<std::vector<octopus::Path> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusPath((value = std::vector<octopus::Path>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusPath(octopus::Path &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 2:
                if (buffer == "op") {
                    if (Error error = parseNonstdOptionalOctopusPathOp(value.op))
                        return error;
                    continue;
                }
                break;
            case 4:
                if (buffer == "type") {
                    if (Error error = parseOctopusPathType(value.type))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "paths") {
                    if (Error error = parseNonstdOptionalStdVectorOctopusPath(value.paths))
                        return error;
                    continue;
                }
                break;
            case 7:
                if (buffer == "visible") {
                    if (Error error = parseBool(value.visible))
                        return error;
                    continue;
                }
                break;
            case 8:
                if (buffer == "geometry") {
                    if (Error error = parseNonstdOptionalStdString(value.geometry))
                        return error;
                    continue;
                }
                break;
            case 9:
                switch (buffer[0]) {
                    case 'r':
                        if (buffer == "rectangle") {
                            if (Error error = parseNonstdOptionalOctopusRectangle(value.rectangle))
                                return error;
                            continue;
                        }
                        break;
                    case 't':
                        if (buffer == "transform") {
                            if (Error error = parseDouble_6(value.transform))
                                return error;
                            continue;
                        }
                        break;
                }
                break;
            case 11:
                if (buffer == "cornerRadii") {
                    if (Error error = parseNonstdOptionalStdVectorDouble(value.cornerRadii))
                        return error;
                    continue;
                }
                break;
            case 12:
                if (buffer == "cornerRadius") {
                    if (Error error = parseNonstdOptionalDouble(value.cornerRadius))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusPath(nonstd::optional<octopus::Path> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusPath((value = octopus::Path()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusShapeStroke(octopus::Shape::Stroke &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'd':
                    switch (buffer.size()) {
                        case 7:
                            if (buffer == "dashing") {
                                if (Error error = parseNonstdOptionalStdVectorDouble(value.dashing))
                                    return error;
                                continue;
                            }
                            break;
                        case 10:
                            if (buffer == "dashOffset") {
                                if (Error error = parseNonstdOptionalDouble(value.dashOffset))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'f':
                    switch (buffer.size()) {
                        case 4:
                            if (buffer == "fill") {
                                if (Error error = parseOctopusFill(value.fill))
                                    return error;
                                continue;
                            }
                            break;
                        case 8:
                            if (buffer == "fillRule") {
                                if (Error error = parseNonstdOptionalOctopusShapeFillRule(value.fillRule))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'l':
                    switch (buffer.size()) {
                        case 7:
                            if (buffer == "lineCap") {
                                if (Error error = parseNonstdOptionalOctopusVectorStrokeLineCap(value.lineCap))
                                    return error;
                                continue;
                            }
                            break;
                        case 8:
                            if (buffer == "lineJoin") {
                                if (Error error = parseNonstdOptionalOctopusVectorStrokeLineJoin(value.lineJoin))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'm':
                    if (buffer == "miterLimit") {
                        if (Error error = parseNonstdOptionalDouble(value.miterLimit))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    switch (buffer.size()) {
                        case 4:
                            if (buffer == "path") {
                                if (Error error = parseNonstdOptionalOctopusPath(value.path))
                                    return error;
                                continue;
                            }
                            break;
                        case 8:
                            if (buffer == "position") {
                                if (Error error = parseOctopusStrokePosition(value.position))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 's':
                    if (buffer == "style") {
                        if (Error error = parseNonstdOptionalOctopusVectorStrokeStyle(value.style))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "thickness") {
                        if (Error error = parseDouble(value.thickness))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "visible") {
                        if (Error error = parseBool(value.visible))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusShapeStroke(std::vector<octopus::Shape::Stroke> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusShapeStroke((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusShape(octopus::Shape &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 4:
                if (buffer == "path") {
                    if (Error error = parseNonstdOptionalOctopusPath(value.path))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "fills") {
                    if (Error error = parseStdVectorOctopusFill(value.fills))
                        return error;
                    continue;
                }
                break;
            case 7:
                if (buffer == "strokes") {
                    if (Error error = parseStdVectorOctopusShapeStroke(value.strokes))
                        return error;
                    continue;
                }
                break;
            case 8:
                if (buffer == "fillRule") {
                    if (Error error = parseNonstdOptionalOctopusShapeFillRule(value.fillRule))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusShape(nonstd::optional<octopus::Shape> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusShape((value = octopus::Shape()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusShapeStroke(nonstd::optional<octopus::Shape::Stroke> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusShapeStroke((value = octopus::Shape::Stroke()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusStyleRangeRange(octopus::StyleRange::Range &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 2:
                if (buffer == "to") {
                    if (Error error = parseInt(value.to))
                        return error;
                    continue;
                }
                break;
            case 4:
                if (buffer == "from") {
                    if (Error error = parseInt(value.from))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusStyleRangeRange(std::vector<octopus::StyleRange::Range> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusStyleRangeRange((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusStyleRange(octopus::StyleRange &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 5:
                if (buffer == "style") {
                    if (Error error = parseOctopusTextStyle(value.style))
                        return error;
                    continue;
                }
                break;
            case 6:
                if (buffer == "ranges") {
                    if (Error error = parseStdVectorOctopusStyleRangeRange(value.ranges))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusStyleRange(std::vector<octopus::StyleRange> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusStyleRange((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusStyleRange(nonstd::optional<std::vector<octopus::StyleRange> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusStyleRange((value = std::vector<octopus::StyleRange>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusShapeStroke(nonstd::optional<std::vector<octopus::Shape::Stroke> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusShapeStroke((value = std::vector<octopus::Shape::Stroke>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextBaselinePolicy(octopus::Text::BaselinePolicy &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "SET");
    if (curDistance < bestDistance) value = octopus::Text::BaselinePolicy::SET, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "CENTER");
    if (curDistance < bestDistance) value = octopus::Text::BaselinePolicy::CENTER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "OFFSET_ASCENDER");
    if (curDistance < bestDistance) value = octopus::Text::BaselinePolicy::OFFSET_ASCENDER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "OFFSET_BEARING");
    if (curDistance < bestDistance) value = octopus::Text::BaselinePolicy::OFFSET_BEARING, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextHorizontalAlign(octopus::Text::HorizontalAlign &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "LEFT");
    if (curDistance < bestDistance) value = octopus::Text::HorizontalAlign::LEFT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "CENTER");
    if (curDistance < bestDistance) value = octopus::Text::HorizontalAlign::CENTER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "RIGHT");
    if (curDistance < bestDistance) value = octopus::Text::HorizontalAlign::RIGHT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "JUSTIFY");
    if (curDistance < bestDistance) value = octopus::Text::HorizontalAlign::JUSTIFY, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextFrameMode(octopus::TextFrame::Mode &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "AUTO_WIDTH");
    if (curDistance < bestDistance) value = octopus::TextFrame::Mode::AUTO_WIDTH, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "AUTO_HEIGHT");
    if (curDistance < bestDistance) value = octopus::TextFrame::Mode::AUTO_HEIGHT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FIXED");
    if (curDistance < bestDistance) value = octopus::TextFrame::Mode::FIXED, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusDimensions(octopus::Dimensions &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 5:
                if (buffer == "width") {
                    if (Error error = parseDouble(value.width))
                        return error;
                    continue;
                }
                break;
            case 6:
                if (buffer == "height") {
                    if (Error error = parseDouble(value.height))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusDimensions(nonstd::optional<octopus::Dimensions> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusDimensions((value = octopus::Dimensions()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextFrame(octopus::TextFrame &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'm':
                    if (buffer == "mode") {
                        if (Error error = parseOctopusTextFrameMode(value.mode))
                            return error;
                        continue;
                    }
                    break;
                case 's':
                    if (buffer == "size") {
                        if (Error error = parseNonstdOptionalOctopusDimensions(value.size))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusTextFrame(nonstd::optional<octopus::TextFrame> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusTextFrame((value = octopus::TextFrame()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextOverflowPolicy(octopus::Text::OverflowPolicy &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "NO_OVERFLOW");
    if (curDistance < bestDistance) value = octopus::Text::OverflowPolicy::NO_OVERFLOW, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "CLIP_LINE");
    if (curDistance < bestDistance) value = octopus::Text::OverflowPolicy::CLIP_LINE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "EXTEND_LINE");
    if (curDistance < bestDistance) value = octopus::Text::OverflowPolicy::EXTEND_LINE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "EXTEND_ALL");
    if (curDistance < bestDistance) value = octopus::Text::OverflowPolicy::EXTEND_ALL, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusTextVerticalAlign(octopus::Text::VerticalAlign &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "TOP");
    if (curDistance < bestDistance) value = octopus::Text::VerticalAlign::TOP, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "CENTER");
    if (curDistance < bestDistance) value = octopus::Text::VerticalAlign::CENTER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "BOTTOM");
    if (curDistance < bestDistance) value = octopus::Text::VerticalAlign::BOTTOM, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusText(octopus::Text &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 3) {
            switch (buffer[3]) {
                case 'a':
                    if (buffer == "defaultStyle") {
                        if (Error error = parseOctopusTextStyle(value.defaultStyle))
                            return error;
                        continue;
                    }
                    break;
                case 'e':
                    if (buffer == "baselinePolicy") {
                        if (Error error = parseOctopusTextBaselinePolicy(value.baselinePolicy))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "horizontalAlign") {
                        if (Error error = parseOctopusTextHorizontalAlign(value.horizontalAlign))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "styles") {
                        if (Error error = parseNonstdOptionalStdVectorOctopusStyleRange(value.styles))
                            return error;
                        continue;
                    }
                    break;
                case 'm':
                    if (buffer == "frame") {
                        if (Error error = parseNonstdOptionalOctopusTextFrame(value.frame))
                            return error;
                        continue;
                    }
                    break;
                case 'n':
                    if (buffer == "transform") {
                        if (Error error = parseDouble_6(value.transform))
                            return error;
                        continue;
                    }
                    break;
                case 'r':
                    if (buffer == "overflowPolicy") {
                        if (Error error = parseOctopusTextOverflowPolicy(value.overflowPolicy))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "verticalAlign") {
                        if (Error error = parseOctopusTextVerticalAlign(value.verticalAlign))
                            return error;
                        continue;
                    }
                    break;
                case 'u':
                    if (buffer == "value") {
                        if (Error error = parseStdString(value.value))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalOctopusText(nonstd::optional<octopus::Text> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusText((value = octopus::Text()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdArrayDouble6(std::array<double, 6> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    int i = 0;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (i == 6)
            return Error::ARRAY_SIZE_MISMATCH;
        if (Error::Type error = parseDouble(value[i]))
            return error;
        ++i;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    if (i != 6)
        return Error::ARRAY_SIZE_MISMATCH;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdArrayDouble6(nonstd::optional<std::array<double, 6> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdArrayDouble6((value = std::array<double, 6>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusLayerChangeValues(octopus::LayerChange::Values &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'b':
                    switch (buffer.size()) {
                        case 5:
                            if (buffer == "basis") {
                                if (Error error = parseNonstdOptionalOctopusEffectBasis(value.basis))
                                    return error;
                                continue;
                            }
                            break;
                        case 9:
                            if (buffer == "blendMode") {
                                if (Error error = parseNonstdOptionalOctopusBlendMode(value.blendMode))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'c':
                    if (buffer == "componentId") {
                        if (Error error = parseNonstdOptionalStdString(value.componentId))
                            return error;
                        continue;
                    }
                    break;
                case 'd':
                    if (buffer == "defaultStyle") {
                        if (Error error = parseNonstdOptionalOctopusTextStyle(value.defaultStyle))
                            return error;
                        continue;
                    }
                    break;
                case 'e':
                    switch (buffer.size()) {
                        case 6:
                            if (buffer == "effect") {
                                if (Error error = parseNonstdOptionalOctopusEffect(value.effect))
                                    return error;
                                continue;
                            }
                            break;
                        case 7:
                            if (buffer == "effects") {
                                if (Error error = parseNonstdOptionalStdVectorOctopusEffect(value.effects))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'f':
                    switch (buffer.size()) {
                        case 4:
                            if (buffer == "fill") {
                                if (Error error = parseNonstdOptionalOctopusFill(value.fill))
                                    return error;
                                continue;
                            }
                            break;
                        case 5:
                            if (buffer == "fills") {
                                if (Error error = parseNonstdOptionalStdVectorOctopusFill(value.fills))
                                    return error;
                                continue;
                            }
                            break;
                        case 6:
                            if (buffer == "filter") {
                                if (Error error = parseNonstdOptionalOctopusFilter(value.filter))
                                    return error;
                                continue;
                            }
                            break;
                        case 7:
                            if (buffer == "filters") {
                                if (Error error = parseNonstdOptionalStdVectorOctopusFilter(value.filters))
                                    return error;
                                continue;
                            }
                            break;
                        case 8:
                            if (buffer == "fillRule") {
                                if (Error error = parseNonstdOptionalOctopusShapeFillRule(value.fillRule))
                                    return error;
                                continue;
                            }
                            break;
                        case 12:
                            if (buffer == "featureScale") {
                                if (Error error = parseNonstdOptionalDouble(value.featureScale))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'm':
                    switch (buffer.size()) {
                        case 9:
                            if (buffer == "maskBasis") {
                                if (Error error = parseNonstdOptionalOctopusMaskBasis(value.maskBasis))
                                    return error;
                                continue;
                            }
                            break;
                        case 12:
                            if (buffer == "maskChannels") {
                                if (Error error = parseNonstdOptionalStdArrayDouble5(value.maskChannels))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseNonstdOptionalStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    if (buffer == "opacity") {
                        if (Error error = parseNonstdOptionalDouble(value.opacity))
                            return error;
                        continue;
                    }
                    break;
                case 'p':
                    if (buffer == "path") {
                        if (Error error = parseNonstdOptionalOctopusPath(value.path))
                            return error;
                        continue;
                    }
                    break;
                case 's':
                    switch (buffer.size()) {
                        case 5:
                            if (buffer == "shape") {
                                if (Error error = parseNonstdOptionalOctopusShape(value.shape))
                                    return error;
                                continue;
                            }
                            break;
                        case 6:
                            switch (buffer[2]) {
                                case 'r':
                                    if (buffer == "stroke") {
                                        if (Error error = parseNonstdOptionalOctopusShapeStroke(value.stroke))
                                            return error;
                                        continue;
                                    }
                                    break;
                                case 'y':
                                    if (buffer == "styles") {
                                        if (Error error = parseNonstdOptionalStdVectorOctopusStyleRange(value.styles))
                                            return error;
                                        continue;
                                    }
                                    break;
                            }
                            break;
                        case 7:
                            if (buffer == "strokes") {
                                if (Error error = parseNonstdOptionalStdVectorOctopusShapeStroke(value.strokes))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 't':
                    switch (buffer.size()) {
                        case 4:
                            if (buffer == "text") {
                                if (Error error = parseNonstdOptionalOctopusText(value.text))
                                    return error;
                                continue;
                            }
                            break;
                        case 9:
                            if (buffer == "transform") {
                                if (Error error = parseNonstdOptionalStdArrayDouble6(value.transform))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'v':
                    switch (buffer.size()) {
                        case 5:
                            if (buffer == "value") {
                                if (Error error = parseNonstdOptionalStdString(value.value))
                                    return error;
                                continue;
                            }
                            break;
                        case 7:
                            if (buffer == "visible") {
                                if (Error error = parseNonstdOptionalBool(value.visible))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusLayerChangeSubject(octopus::LayerChange::Subject &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "LAYER");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::LAYER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "SHAPE");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::SHAPE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "TEXT");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::TEXT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FILL");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::FILL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "STROKE");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::STROKE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "STROKE_FILL");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::STROKE_FILL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "EFFECT");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::EFFECT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "EFFECT_FILL");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::EFFECT_FILL, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "FILL_FILTER");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::FILL_FILTER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "STROKE_FILL_FILTER");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::STROKE_FILL_FILTER, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "EFFECT_FILL_FILTER");
    if (curDistance < bestDistance) value = octopus::LayerChange::Subject::EFFECT_FILL_FILTER, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusLayerChange(octopus::LayerChange &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 2:
                if (buffer == "op") {
                    if (Error error = parseOctopusLayerChangeOp(value.op))
                        return error;
                    continue;
                }
                break;
            case 5:
                if (buffer == "index") {
                    if (Error error = parseNonstdOptionalInt(value.index))
                        return error;
                    continue;
                }
                break;
            case 6:
                if (buffer == "values") {
                    if (Error error = parseOctopusLayerChangeValues(value.values))
                        return error;
                    continue;
                }
                break;
            case 7:
                if (buffer == "subject") {
                    if (Error error = parseOctopusLayerChangeSubject(value.subject))
                        return error;
                    continue;
                }
                break;
            case 11:
                if (buffer == "filterIndex") {
                    if (Error error = parseNonstdOptionalInt(value.filterIndex))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusLayerChange(std::vector<octopus::LayerChange> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusLayerChange((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusOverride(octopus::Override &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        switch (buffer.size()) {
            case 6:
                if (buffer == "target") {
                    if (Error error = parseStdVectorStdString(value.target))
                        return error;
                    continue;
                }
                break;
            case 7:
                if (buffer == "changes") {
                    if (Error error = parseStdVectorOctopusLayerChange(value.changes))
                        return error;
                    continue;
                }
                break;
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseStdVectorOctopusOverride(std::vector<octopus::Override> &value) {
    if (!matchSymbol('['))
        return Error::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseOctopusOverride((value.resize(value.size()+1), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalStdVectorOctopusOverride(nonstd::optional<std::vector<octopus::Override> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseStdVectorOctopusOverride((value = std::vector<octopus::Override>()).value()))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusLayerType(octopus::Layer::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "SHAPE");
    if (curDistance < bestDistance) value = octopus::Layer::Type::SHAPE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "TEXT");
    if (curDistance < bestDistance) value = octopus::Layer::Type::TEXT, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "GROUP");
    if (curDistance < bestDistance) value = octopus::Layer::Type::GROUP, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "MASK_GROUP");
    if (curDistance < bestDistance) value = octopus::Layer::Type::MASK_GROUP, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "COMPONENT_REFERENCE");
    if (curDistance < bestDistance) value = octopus::Layer::Type::COMPONENT_REFERENCE, bestDistance = curDistance;
    curDistance = levenshtein(buffer, "COMPONENT_INSTANCE");
    if (curDistance < bestDistance) value = octopus::Layer::Type::COMPONENT_INSTANCE, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusLayer(octopus::Layer &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'b':
                    if (buffer == "blendMode") {
                        if (Error error = parseOctopusBlendMode(value.blendMode))
                            return error;
                        continue;
                    }
                    break;
                case 'c':
                    if (buffer == "componentId") {
                        if (Error error = parseNonstdOptionalStdString(value.componentId))
                            return error;
                        continue;
                    }
                    break;
                case 'e':
                    if (buffer == "effects") {
                        if (Error error = parseStdVectorOctopusEffect(value.effects))
                            return error;
                        continue;
                    }
                    break;
                case 'f':
                    if (buffer == "featureScale") {
                        if (Error error = parseNonstdOptionalDouble(value.featureScale))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "id") {
                        if (Error error = parseStdString(value.id))
                            return error;
                        continue;
                    }
                    break;
                case 'l':
                    if (buffer == "layers") {
                        if (Error error = parseNonstdOptionalStdListOctopusLayer(value.layers))
                            return error;
                        continue;
                    }
                    break;
                case 'm':
                    switch (buffer.size()) {
                        case 4:
                            if (buffer == "mask") {
                                if (Error error = parseNonstdOptionalPtrOctopusLayer(value.mask))
                                    return error;
                                continue;
                            }
                            break;
                        case 9:
                            if (buffer == "maskBasis") {
                                if (Error error = parseNonstdOptionalOctopusMaskBasis(value.maskBasis))
                                    return error;
                                continue;
                            }
                            break;
                        case 12:
                            if (buffer == "maskChannels") {
                                if (Error error = parseNonstdOptionalStdArrayDouble5(value.maskChannels))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 'n':
                    if (buffer == "name") {
                        if (Error error = parseStdString(value.name))
                            return error;
                        continue;
                    }
                    break;
                case 'o':
                    switch (buffer.size()) {
                        case 7:
                            if (buffer == "opacity") {
                                if (Error error = parseDouble(value.opacity))
                                    return error;
                                continue;
                            }
                            break;
                        case 9:
                            if (buffer == "overrides") {
                                if (Error error = parseNonstdOptionalStdVectorOctopusOverride(value.overrides))
                                    return error;
                                continue;
                            }
                            break;
                    }
                    break;
                case 's':
                    if (buffer == "shape") {
                        if (Error error = parseNonstdOptionalOctopusShape(value.shape))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer.size() > 1) {
                        switch (buffer[1]) {
                            case 'e':
                                if (buffer == "text") {
                                    if (Error error = parseNonstdOptionalOctopusText(value.text))
                                        return error;
                                    continue;
                                }
                                break;
                            case 'r':
                                if (buffer == "transform") {
                                    if (Error error = parseDouble_6(value.transform))
                                        return error;
                                    continue;
                                }
                                break;
                            case 'y':
                                if (buffer == "type") {
                                    if (Error error = parseOctopusLayerType(value.type))
                                        return error;
                                    continue;
                                }
                                break;
                        }
                    }
                    break;
                case 'v':
                    if (buffer == "visible") {
                        if (Error error = parseBool(value.visible))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

Parser::Error::Type Parser::parseNonstdOptionalPtrOctopusLayer(nonstd::optional_ptr<octopus::Layer> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && (cur += 4, true))
        value.reset();
    else if (Error error = parseOctopusLayer(*(value = new octopus::Layer())))
        return error;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusOctopusType(octopus::Octopus::Type &value) {
    if (Error::Type error = parseStdString(buffer))
        return error;
    int curDistance, bestDistance = 0xffff;
    curDistance = levenshtein(buffer, "OCTOPUS_COMPONENT");
    if (curDistance < bestDistance) value = octopus::Octopus::Type::OCTOPUS_COMPONENT, bestDistance = curDistance;
    return Error::OK;
    return Error::OK;
}

Parser::Error::Type Parser::parseOctopusOctopus(octopus::Octopus &value) {
    if (!matchSymbol('{'))
        return Error::TYPE_MISMATCH;
    int separatorCheck = -1;
    for (; !matchSymbol('}'); separatorCheck = matchSymbol(',')) {
        if (!separatorCheck)
            return Error::JSON_SYNTAX_ERROR;
        if (Error::Type error = parseStdString(buffer))
            return error;
        if (!matchSymbol(':'))
            return Error::JSON_SYNTAX_ERROR;
        if (buffer.size() > 0) {
            switch (buffer[0]) {
                case 'c':
                    if (buffer == "content") {
                        if (Error error = parseNonstdOptionalPtrOctopusLayer(value.content))
                            return error;
                        continue;
                    }
                    break;
                case 'd':
                    if (buffer == "dimensions") {
                        if (Error error = parseNonstdOptionalOctopusDimensions(value.dimensions))
                            return error;
                        continue;
                    }
                    break;
                case 'i':
                    if (buffer == "id") {
                        if (Error error = parseStdString(value.id))
                            return error;
                        continue;
                    }
                    break;
                case 't':
                    if (buffer == "type") {
                        if (Error error = parseOctopusOctopusType(value.type))
                            return error;
                        continue;
                    }
                    break;
                case 'v':
                    if (buffer == "version") {
                        if (Error error = parseStdString(value.version))
                            return error;
                        continue;
                    }
                    break;
            }
        }
        if (Error error = skipValue())
            return error;
    }
    if (separatorCheck == 1)
        return Error::JSON_SYNTAX_ERROR;
    return Error::OK;
}

}
