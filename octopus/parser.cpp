
#include <cstdlib>
#include <cstdio>
#include "parser.h"

// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

namespace octopus {

Parser::Error::operator Parser::ErrorType() const {
    return type;
}

Parser::Error::operator bool() const {
    return type != ErrorType::OK;
}

const char *Parser::Error::typeString() const {
    switch (type) {
        case ErrorType::OK:
            return "OK";
        case ErrorType::JSON_SYNTAX_ERROR:
            return "JSON_SYNTAX_ERROR";
        case ErrorType::UNEXPECTED_END_OF_FILE:
            return "UNEXPECTED_END_OF_FILE";
        case ErrorType::TYPE_MISMATCH:
            return "TYPE_MISMATCH";
        case ErrorType::ARRAY_SIZE_MISMATCH:
            return "ARRAY_SIZE_MISMATCH";
        case ErrorType::UNKNOWN_KEY:
            return "UNKNOWN_KEY";
        case ErrorType::UNKNOWN_ENUM_VALUE:
            return "UNKNOWN_ENUM_VALUE";
        case ErrorType::VALUE_OUT_OF_RANGE:
            return "VALUE_OUT_OF_RANGE";
        case ErrorType::STRING_EXPECTED:
            return "STRING_EXPECTED";
        case ErrorType::UTF16_ENCODING_ERROR:
            return "UTF16_ENCODING_ERROR";
    }
    return "";
}

Parser::Parser(const char *str) : cur(str) { }

void Parser::skipWhitespace() {
    while (*cur == ' ' || *cur == '\t' || *cur == '\r' || *cur == '\n')
        ++cur;
}

Parser::ErrorType Parser::skipValue() {
    skipWhitespace();
    switch (*cur) {
        case '\0':
            return ErrorType::UNEXPECTED_END_OF_FILE;
        case '"':
            while (*++cur != '"') {
                if (!*(cur += *cur == '\\'))
                    return ErrorType::UNEXPECTED_END_OF_FILE;
            }
            ++cur;
            return ErrorType::OK;
        case '[': case '{':
            ++cur;
            for (int openBrackets = 1; openBrackets;) {
                switch (*cur) {
                    case '\0':
                        return ErrorType::UNEXPECTED_END_OF_FILE;
                    case '"':
                        if (ErrorType error = skipValue())
                            return error;
                        continue;
                    case '[': case '{':
                        ++openBrackets;
                        break;
                    case ']': case '}':
                        --openBrackets;
                        break;
                }
                ++cur;
            }
            return ErrorType::OK;
        default:
            if (isAlphanumeric(*cur) || *cur == '-' || *cur == '.') {
                while (isAlphanumeric(*++cur) || *cur == '+' || *cur == '-' || *cur == '.');
                return ErrorType::OK;
            }
    }
    return ErrorType::JSON_SYNTAX_ERROR;
}

bool Parser::matchSymbol(char s) {
    skipWhitespace();
    if (*cur == s) {
        ++cur;
        return true;
    }
    return false;
}

Parser::ErrorType Parser::unescape(char *codepoints) {
    switch (*++cur) {
        case '\0':
            return ErrorType::UNEXPECTED_END_OF_FILE;
        case 'B': case 'b': codepoints[0] = '\b'; break;
        case 'F': case 'f': codepoints[0] = '\f'; break;
        case 'N': case 'n': codepoints[0] = '\n'; break;
        case 'R': case 'r': codepoints[0] = '\r'; break;
        case 'T': case 't': codepoints[0] = '\t'; break;
        case 'U': case 'u': {
            unsigned long cp;
            unsigned short wc;
            ++cur;
            if (!(cur[0] && cur[1] && cur[2] && cur[3]))
                return ErrorType::JSON_SYNTAX_ERROR;
            codepoints[0] = cur[0], codepoints[1] = cur[1], codepoints[2] = cur[2], codepoints[3] = cur[3];
            codepoints[4] = '\0';
            cur += 3;
            if (sscanf(codepoints, "%hx", &wc) != 1)
                return ErrorType::JSON_SYNTAX_ERROR;
            if ((wc&0xfc00) == 0xd800) {
                if (!(cur[1] == '\\' && (cur[2] == 'u' || cur[2] == 'U')))
                    return ErrorType::UTF16_ENCODING_ERROR;
                cp = (unsigned long) (wc&0x03ff)<<10;
                cur += 3;
                if (!(cur[0] && cur[1] && cur[2] && cur[3]))
                    return ErrorType::JSON_SYNTAX_ERROR;
                codepoints[0] = cur[0], codepoints[1] = cur[1], codepoints[2] = cur[2], codepoints[3] = cur[3];
                codepoints[4] = '\0';
                cur += 3;
                if (sscanf(codepoints, "%hx", &wc) != 1)
                    return ErrorType::JSON_SYNTAX_ERROR;
                if ((wc&0xfc00) != 0xdc00)
                    return ErrorType::UTF16_ENCODING_ERROR;
                cp = 0x010000+(cp|(unsigned long) (wc&0x03ff));
            } else
                cp = wc;
            if (cp&0xffffff80) {
                int len;
                for (len = 1; cp>>(5*len+1) && len < 6; ++len);
                codepoints[0] = (char) (0xff<<(8-len)|cp>>6*(len-1));
                for (int i = 1; i < len; ++i)
                    *++codepoints = (char) (0x80|(cp>>6*(len-i-1)&0x3f));
            } else
                codepoints[0] = (char) cp;
            break;
        }
        default:
            codepoints[0] = *cur;
    }
    codepoints[1] = '\0';
    return ErrorType::OK;
}

bool Parser::isAlphanumeric(char c) {
    switch (c) {
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G': case 'H': case 'I':
        case 'J': case 'K': case 'L': case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i':
        case 'j': case 'k': case 'l': case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
        case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            return true;
        default:
            return false;
    }
}

template <typename T>
Parser::ErrorType Parser::readSigned(T &value) {
    bool negative = *cur == '-' && (++cur, true);
    if (*cur >= '0' && *cur <= '9')
        value = *cur++-'0';
    else
        return ErrorType::TYPE_MISMATCH;
    while (*cur >= '0' && *cur <= '9') {
        if (10*value < value)
            return ErrorType::VALUE_OUT_OF_RANGE;
        value = 10*value+(*cur++-'0');
    }
    if (negative)
        value = -value;
    return ErrorType::OK;
}

Parser::Error Parser::parse(octopus::Octopus &output, const char *jsonString) {
    Parser parser(jsonString);
    ErrorType error = parser.parseOctopusOctopus(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

Parser::Error Parser::parse(octopus::Layer &output, const char *jsonString) {
    Parser parser(jsonString);
    ErrorType error = parser.parseOctopusLayer(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

Parser::Error Parser::parse(octopus::LayerChange &output, const char *jsonString) {
    Parser parser(jsonString);
    ErrorType error = parser.parseOctopusLayerChange(output);
    return Error(error, static_cast<int>(parser.cur-jsonString));
}

Parser::ErrorType Parser::parseStdString(std::string &value) {
    skipWhitespace();
    if (*cur != '"')
        return ErrorType::STRING_EXPECTED;
    value.clear();
    while (*++cur != '"') {
        if (*cur == '\\') {
            char buffer[8];
            if (Error error = unescape(buffer))
                return error;
            value += buffer;
            continue;
        }
        if (!*cur)
            return ErrorType::UNEXPECTED_END_OF_FILE;
        value.push_back(*cur);
    }
    ++cur;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusOctopusType(octopus::Octopus::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "OCTOPUS_COMPONENT")
        value = octopus::Octopus::Type::OCTOPUS_COMPONENT;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseDouble(double &value) {
    char *end;
    value = strtod(cur, &end);
    if (end == cur)
        return ErrorType::TYPE_MISMATCH;
    cur = end;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusDimensions(octopus::Dimensions &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "width") {
            if (Error error = parseDouble(value.width))
                return error;
        } else if (key == "height") {
            if (Error error = parseDouble(value.height))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusDimensions(nonstd::optional<octopus::Dimensions> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusDimensions((value = octopus::Dimensions()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusLayerType(octopus::Layer::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "SHAPE")
        value = octopus::Layer::Type::SHAPE;
    else if (str == "TEXT")
        value = octopus::Layer::Type::TEXT;
    else if (str == "GROUP")
        value = octopus::Layer::Type::GROUP;
    else if (str == "MASK_GROUP")
        value = octopus::Layer::Type::MASK_GROUP;
    else if (str == "COMPONENT_REFERENCE")
        value = octopus::Layer::Type::COMPONENT_REFERENCE;
    else if (str == "COMPONENT_INSTANCE")
        value = octopus::Layer::Type::COMPONENT_INSTANCE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseBool(bool &value) {
    skipWhitespace();
    if (cur[0] == 'f' && cur[1] == 'a' && cur[2] == 'l' && cur[3] == 's' && cur[4] == 'e' && !isAlphanumeric(cur[5]) && cur[5] != '_' && ((cur += 5), true))
        value = false;
    else if (cur[0] == 't' && cur[1] == 'r' && cur[2] == 'u' && cur[3] == 'e' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value = true;
    else
        return ErrorType::TYPE_MISMATCH;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusBlendMode(octopus::BlendMode &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "NORMAL")
        value = octopus::BlendMode::NORMAL;
    else if (str == "PASS_THROUGH")
        value = octopus::BlendMode::PASS_THROUGH;
    else if (str == "COLOR")
        value = octopus::BlendMode::COLOR;
    else if (str == "COLOR_BURN")
        value = octopus::BlendMode::COLOR_BURN;
    else if (str == "COLOR_DODGE")
        value = octopus::BlendMode::COLOR_DODGE;
    else if (str == "DARKEN")
        value = octopus::BlendMode::DARKEN;
    else if (str == "DARKER_COLOR")
        value = octopus::BlendMode::DARKER_COLOR;
    else if (str == "DIFFERENCE")
        value = octopus::BlendMode::DIFFERENCE;
    else if (str == "DIVIDE")
        value = octopus::BlendMode::DIVIDE;
    else if (str == "EXCLUSION")
        value = octopus::BlendMode::EXCLUSION;
    else if (str == "HARD_LIGHT")
        value = octopus::BlendMode::HARD_LIGHT;
    else if (str == "HARD_MIX")
        value = octopus::BlendMode::HARD_MIX;
    else if (str == "HUE")
        value = octopus::BlendMode::HUE;
    else if (str == "LIGHTEN")
        value = octopus::BlendMode::LIGHTEN;
    else if (str == "LIGHTER_COLOR")
        value = octopus::BlendMode::LIGHTER_COLOR;
    else if (str == "LINEAR_BURN")
        value = octopus::BlendMode::LINEAR_BURN;
    else if (str == "LINEAR_DODGE")
        value = octopus::BlendMode::LINEAR_DODGE;
    else if (str == "LINEAR_LIGHT")
        value = octopus::BlendMode::LINEAR_LIGHT;
    else if (str == "LUMINOSITY")
        value = octopus::BlendMode::LUMINOSITY;
    else if (str == "MULTIPLY")
        value = octopus::BlendMode::MULTIPLY;
    else if (str == "OVERLAY")
        value = octopus::BlendMode::OVERLAY;
    else if (str == "PIN_LIGHT")
        value = octopus::BlendMode::PIN_LIGHT;
    else if (str == "SATURATION")
        value = octopus::BlendMode::SATURATION;
    else if (str == "SCREEN")
        value = octopus::BlendMode::SCREEN;
    else if (str == "SOFT_LIGHT")
        value = octopus::BlendMode::SOFT_LIGHT;
    else if (str == "SUBTRACT")
        value = octopus::BlendMode::SUBTRACT;
    else if (str == "VIVID_LIGHT")
        value = octopus::BlendMode::VIVID_LIGHT;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseDouble_6(double value[6]) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    int i = 0;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (i == 6)
            return ErrorType::ARRAY_SIZE_MISMATCH;
        if (ErrorType error = parseDouble(value[i++]))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    if (i != 6)
        return ErrorType::ARRAY_SIZE_MISMATCH;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalDouble(nonstd::optional<double> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseDouble((value = double()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusShapeFillRule(octopus::Shape::FillRule &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "EVEN_ODD")
        value = octopus::Shape::FillRule::EVEN_ODD;
    else if (str == "NON_ZERO")
        value = octopus::Shape::FillRule::NON_ZERO;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusShapeFillRule(nonstd::optional<octopus::Shape::FillRule> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusShapeFillRule((value = octopus::Shape::FillRule()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusPathType(octopus::Path::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "PATH")
        value = octopus::Path::Type::PATH;
    else if (str == "RECTANGLE")
        value = octopus::Path::Type::RECTANGLE;
    else if (str == "COMPOUND")
        value = octopus::Path::Type::COMPOUND;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusPathOp(octopus::Path::Op &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "UNION")
        value = octopus::Path::Op::UNION;
    else if (str == "INTERSECT")
        value = octopus::Path::Op::INTERSECT;
    else if (str == "SUBTRACT")
        value = octopus::Path::Op::SUBTRACT;
    else if (str == "EXCLUDE")
        value = octopus::Path::Op::EXCLUDE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusPathOp(nonstd::optional<octopus::Path::Op> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusPathOp((value = octopus::Path::Op()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdString(nonstd::optional<std::string> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdString((value = std::string()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusPath(std::vector<octopus::Path> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusPath((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusPath(nonstd::optional<std::vector<octopus::Path> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusPath((value = std::vector<octopus::Path>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusRectangle(octopus::Rectangle &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "x0") {
            if (Error error = parseDouble(value.x0))
                return error;
        } else if (key == "y0") {
            if (Error error = parseDouble(value.y0))
                return error;
        } else if (key == "x1") {
            if (Error error = parseDouble(value.x1))
                return error;
        } else if (key == "y1") {
            if (Error error = parseDouble(value.y1))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusRectangle(nonstd::optional<octopus::Rectangle> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusRectangle((value = octopus::Rectangle()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorDouble(std::vector<double> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseDouble((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorDouble(nonstd::optional<std::vector<double> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorDouble((value = std::vector<double>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusPath(octopus::Path &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "type") {
            if (Error error = parseOctopusPathType(value.type))
                return error;
        } else if (key == "visible") {
            if (Error error = parseBool(value.visible))
                return error;
        } else if (key == "op") {
            if (Error error = parseNonstdOptionalOctopusPathOp(value.op))
                return error;
        } else if (key == "geometry") {
            if (Error error = parseNonstdOptionalStdString(value.geometry))
                return error;
        } else if (key == "paths") {
            if (Error error = parseNonstdOptionalStdVectorOctopusPath(value.paths))
                return error;
        } else if (key == "rectangle") {
            if (Error error = parseNonstdOptionalOctopusRectangle(value.rectangle))
                return error;
        } else if (key == "cornerRadius") {
            if (Error error = parseNonstdOptionalDouble(value.cornerRadius))
                return error;
        } else if (key == "cornerRadii") {
            if (Error error = parseNonstdOptionalStdVectorDouble(value.cornerRadii))
                return error;
        } else if (key == "transform") {
            if (Error error = parseDouble_6(value.transform))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusPath(nonstd::optional<octopus::Path> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusPath((value = octopus::Path()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFillType(octopus::Fill::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "COLOR")
        value = octopus::Fill::Type::COLOR;
    else if (str == "GRADIENT")
        value = octopus::Fill::Type::GRADIENT;
    else if (str == "IMAGE")
        value = octopus::Fill::Type::IMAGE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusColor(octopus::Color &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "r") {
            if (Error error = parseDouble(value.r))
                return error;
        } else if (key == "g") {
            if (Error error = parseDouble(value.g))
                return error;
        } else if (key == "b") {
            if (Error error = parseDouble(value.b))
                return error;
        } else if (key == "a") {
            if (Error error = parseDouble(value.a))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusColor(nonstd::optional<octopus::Color> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusColor((value = octopus::Color()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusGradientType(octopus::Gradient::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "LINEAR")
        value = octopus::Gradient::Type::LINEAR;
    else if (str == "RADIAL")
        value = octopus::Gradient::Type::RADIAL;
    else if (str == "ANGULAR")
        value = octopus::Gradient::Type::ANGULAR;
    else if (str == "DIAMOND")
        value = octopus::Gradient::Type::DIAMOND;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusGradientInterpolation(octopus::Gradient::Interpolation &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "LINEAR")
        value = octopus::Gradient::Interpolation::LINEAR;
    else if (str == "POWER")
        value = octopus::Gradient::Interpolation::POWER;
    else if (str == "REVERSE_POWER")
        value = octopus::Gradient::Interpolation::REVERSE_POWER;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusGradientColorStop(octopus::Gradient::ColorStop &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "position") {
            if (Error error = parseDouble(value.position))
                return error;
        } else if (key == "interpolation") {
            if (Error error = parseOctopusGradientInterpolation(value.interpolation))
                return error;
        } else if (key == "interpolationParameter") {
            if (Error error = parseNonstdOptionalDouble(value.interpolationParameter))
                return error;
        } else if (key == "color") {
            if (Error error = parseOctopusColor(value.color))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusGradientColorStop(std::vector<octopus::Gradient::ColorStop> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusGradientColorStop((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusGradient(octopus::Gradient &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "type") {
            if (Error error = parseOctopusGradientType(value.type))
                return error;
        } else if (key == "stops") {
            if (Error error = parseStdVectorOctopusGradientColorStop(value.stops))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusGradient(nonstd::optional<octopus::Gradient> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusGradient((value = octopus::Gradient()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusImageRefType(octopus::ImageRef::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "PATH")
        value = octopus::ImageRef::Type::PATH;
    else if (str == "RESOURCE_REF")
        value = octopus::ImageRef::Type::RESOURCE_REF;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusImageRef(octopus::ImageRef &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "type") {
            if (Error error = parseOctopusImageRefType(value.type))
                return error;
        } else if (key == "value") {
            if (Error error = parseStdString(value.value))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusImage(octopus::Image &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "ref") {
            if (Error error = parseOctopusImageRef(value.ref))
                return error;
        } else if (key == "subsection") {
            if (Error error = parseNonstdOptionalOctopusRectangle(value.subsection))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusImage(nonstd::optional<octopus::Image> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusImage((value = octopus::Image()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFillPositioningLayout(octopus::Fill::Positioning::Layout &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "STRETCH")
        value = octopus::Fill::Positioning::Layout::STRETCH;
    else if (str == "FILL")
        value = octopus::Fill::Positioning::Layout::FILL;
    else if (str == "FIT")
        value = octopus::Fill::Positioning::Layout::FIT;
    else if (str == "TILE")
        value = octopus::Fill::Positioning::Layout::TILE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFillPositioningOrigin(octopus::Fill::Positioning::Origin &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "LAYER")
        value = octopus::Fill::Positioning::Origin::LAYER;
    else if (str == "PARENT")
        value = octopus::Fill::Positioning::Origin::PARENT;
    else if (str == "COMPONENT")
        value = octopus::Fill::Positioning::Origin::COMPONENT;
    else if (str == "ARTBOARD")
        value = octopus::Fill::Positioning::Origin::ARTBOARD;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFillPositioning(octopus::Fill::Positioning &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "layout") {
            if (Error error = parseOctopusFillPositioningLayout(value.layout))
                return error;
        } else if (key == "origin") {
            if (Error error = parseOctopusFillPositioningOrigin(value.origin))
                return error;
        } else if (key == "transform") {
            if (Error error = parseDouble_6(value.transform))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusFillPositioning(nonstd::optional<octopus::Fill::Positioning> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusFillPositioning((value = octopus::Fill::Positioning()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFilterType(octopus::Filter::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "OPACITY_MULTIPLIER")
        value = octopus::Filter::Type::OPACITY_MULTIPLIER;
    else if (str == "XD_BRIGHTNESS_ADJUSTMENT")
        value = octopus::Filter::Type::XD_BRIGHTNESS_ADJUSTMENT;
    else if (str == "SKETCH_BRIGHTNESS_ADJUSTMENT")
        value = octopus::Filter::Type::SKETCH_BRIGHTNESS_ADJUSTMENT;
    else if (str == "SKETCH_COLOR_ADJUSTMENT")
        value = octopus::Filter::Type::SKETCH_COLOR_ADJUSTMENT;
    else if (str == "FIGMA_COLOR_ADJUSTMENT")
        value = octopus::Filter::Type::FIGMA_COLOR_ADJUSTMENT;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusColorAdjustment(octopus::ColorAdjustment &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "hue") {
            if (Error error = parseDouble(value.hue))
                return error;
        } else if (key == "saturation") {
            if (Error error = parseDouble(value.saturation))
                return error;
        } else if (key == "brightness") {
            if (Error error = parseDouble(value.brightness))
                return error;
        } else if (key == "contrast") {
            if (Error error = parseDouble(value.contrast))
                return error;
        } else if (key == "exposure") {
            if (Error error = parseDouble(value.exposure))
                return error;
        } else if (key == "temperature") {
            if (Error error = parseDouble(value.temperature))
                return error;
        } else if (key == "tint") {
            if (Error error = parseDouble(value.tint))
                return error;
        } else if (key == "highlights") {
            if (Error error = parseDouble(value.highlights))
                return error;
        } else if (key == "shadows") {
            if (Error error = parseDouble(value.shadows))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusColorAdjustment(nonstd::optional<octopus::ColorAdjustment> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusColorAdjustment((value = octopus::ColorAdjustment()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFilter(octopus::Filter &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "type") {
            if (Error error = parseOctopusFilterType(value.type))
                return error;
        } else if (key == "visible") {
            if (Error error = parseBool(value.visible))
                return error;
        } else if (key == "opacity") {
            if (Error error = parseNonstdOptionalDouble(value.opacity))
                return error;
        } else if (key == "brightness") {
            if (Error error = parseNonstdOptionalDouble(value.brightness))
                return error;
        } else if (key == "colorAdjustment") {
            if (Error error = parseNonstdOptionalOctopusColorAdjustment(value.colorAdjustment))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusFilter(std::vector<octopus::Filter> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusFilter((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusFilter(nonstd::optional<std::vector<octopus::Filter> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusFilter((value = std::vector<octopus::Filter>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFill(octopus::Fill &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "type") {
            if (Error error = parseOctopusFillType(value.type))
                return error;
        } else if (key == "visible") {
            if (Error error = parseBool(value.visible))
                return error;
        } else if (key == "blendMode") {
            if (Error error = parseOctopusBlendMode(value.blendMode))
                return error;
        } else if (key == "color") {
            if (Error error = parseNonstdOptionalOctopusColor(value.color))
                return error;
        } else if (key == "gradient") {
            if (Error error = parseNonstdOptionalOctopusGradient(value.gradient))
                return error;
        } else if (key == "image") {
            if (Error error = parseNonstdOptionalOctopusImage(value.image))
                return error;
        } else if (key == "positioning") {
            if (Error error = parseNonstdOptionalOctopusFillPositioning(value.positioning))
                return error;
        } else if (key == "filters") {
            if (Error error = parseNonstdOptionalStdVectorOctopusFilter(value.filters))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusFill(std::vector<octopus::Fill> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusFill((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusStrokePosition(octopus::Stroke::Position &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "OUTSIDE")
        value = octopus::Stroke::Position::OUTSIDE;
    else if (str == "CENTER")
        value = octopus::Stroke::Position::CENTER;
    else if (str == "INSIDE")
        value = octopus::Stroke::Position::INSIDE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusVectorStrokeStyle(octopus::VectorStroke::Style &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "SOLID")
        value = octopus::VectorStroke::Style::SOLID;
    else if (str == "DASHED")
        value = octopus::VectorStroke::Style::DASHED;
    else if (str == "DOTTED")
        value = octopus::VectorStroke::Style::DOTTED;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusVectorStrokeStyle(nonstd::optional<octopus::VectorStroke::Style> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusVectorStrokeStyle((value = octopus::VectorStroke::Style()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusVectorStrokeLineJoin(octopus::VectorStroke::LineJoin &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "MITER")
        value = octopus::VectorStroke::LineJoin::MITER;
    else if (str == "ROUND")
        value = octopus::VectorStroke::LineJoin::ROUND;
    else if (str == "BEVEL")
        value = octopus::VectorStroke::LineJoin::BEVEL;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusVectorStrokeLineJoin(nonstd::optional<octopus::VectorStroke::LineJoin> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusVectorStrokeLineJoin((value = octopus::VectorStroke::LineJoin()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusVectorStrokeLineCap(octopus::VectorStroke::LineCap &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "BUTT")
        value = octopus::VectorStroke::LineCap::BUTT;
    else if (str == "ROUND")
        value = octopus::VectorStroke::LineCap::ROUND;
    else if (str == "SQUARE")
        value = octopus::VectorStroke::LineCap::SQUARE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusVectorStrokeLineCap(nonstd::optional<octopus::VectorStroke::LineCap> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusVectorStrokeLineCap((value = octopus::VectorStroke::LineCap()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusShapeStroke(octopus::Shape::Stroke &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "fill") {
            if (Error error = parseOctopusFill(value.fill))
                return error;
        } else if (key == "thickness") {
            if (Error error = parseDouble(value.thickness))
                return error;
        } else if (key == "position") {
            if (Error error = parseOctopusStrokePosition(value.position))
                return error;
        } else if (key == "visible") {
            if (Error error = parseBool(value.visible))
                return error;
        } else if (key == "style") {
            if (Error error = parseNonstdOptionalOctopusVectorStrokeStyle(value.style))
                return error;
        } else if (key == "lineJoin") {
            if (Error error = parseNonstdOptionalOctopusVectorStrokeLineJoin(value.lineJoin))
                return error;
        } else if (key == "lineCap") {
            if (Error error = parseNonstdOptionalOctopusVectorStrokeLineCap(value.lineCap))
                return error;
        } else if (key == "miterLimit") {
            if (Error error = parseNonstdOptionalDouble(value.miterLimit))
                return error;
        } else if (key == "dashing") {
            if (Error error = parseNonstdOptionalStdVectorDouble(value.dashing))
                return error;
        } else if (key == "dashOffset") {
            if (Error error = parseNonstdOptionalDouble(value.dashOffset))
                return error;
        } else if (key == "fillRule") {
            if (Error error = parseNonstdOptionalOctopusShapeFillRule(value.fillRule))
                return error;
        } else if (key == "path") {
            if (Error error = parseNonstdOptionalOctopusPath(value.path))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusShapeStroke(std::vector<octopus::Shape::Stroke> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusShapeStroke((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusShape(octopus::Shape &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "fillRule") {
            if (Error error = parseNonstdOptionalOctopusShapeFillRule(value.fillRule))
                return error;
        } else if (key == "path") {
            if (Error error = parseNonstdOptionalOctopusPath(value.path))
                return error;
        } else if (key == "fills") {
            if (Error error = parseStdVectorOctopusFill(value.fills))
                return error;
        } else if (key == "strokes") {
            if (Error error = parseStdVectorOctopusShapeStroke(value.strokes))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusShape(nonstd::optional<octopus::Shape> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusShape((value = octopus::Shape()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalBool(nonstd::optional<bool> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseBool((value = bool()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusFont(octopus::Font &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "postScriptName") {
            if (Error error = parseStdString(value.postScriptName))
                return error;
        } else if (key == "family") {
            if (Error error = parseNonstdOptionalStdString(value.family))
                return error;
        } else if (key == "style") {
            if (Error error = parseNonstdOptionalStdString(value.style))
                return error;
        } else if (key == "syntheticPostScriptName") {
            if (Error error = parseNonstdOptionalBool(value.syntheticPostScriptName))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusFont(nonstd::optional<octopus::Font> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusFont((value = octopus::Font()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseInt(int &value) {
    skipWhitespace();
    return readSigned(value);
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusOpenTypeFeature(octopus::OpenTypeFeature &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "tag") {
            if (Error error = parseStdString(value.tag))
                return error;
        } else if (key == "value") {
            if (Error error = parseInt(value.value))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusOpenTypeFeature(std::vector<octopus::OpenTypeFeature> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusOpenTypeFeature((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusOpenTypeFeature(nonstd::optional<std::vector<octopus::OpenTypeFeature> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusOpenTypeFeature((value = std::vector<octopus::OpenTypeFeature>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextStyleLigatures(octopus::TextStyle::Ligatures &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "NONE")
        value = octopus::TextStyle::Ligatures::NONE;
    else if (str == "STANDARD")
        value = octopus::TextStyle::Ligatures::STANDARD;
    else if (str == "ALL")
        value = octopus::TextStyle::Ligatures::ALL;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusTextStyleLigatures(nonstd::optional<octopus::TextStyle::Ligatures> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusTextStyleLigatures((value = octopus::TextStyle::Ligatures()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextStyleUnderline(octopus::TextStyle::Underline &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "NONE")
        value = octopus::TextStyle::Underline::NONE;
    else if (str == "SINGLE")
        value = octopus::TextStyle::Underline::SINGLE;
    else if (str == "DOUBLE")
        value = octopus::TextStyle::Underline::DOUBLE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusTextStyleUnderline(nonstd::optional<octopus::TextStyle::Underline> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusTextStyleUnderline((value = octopus::TextStyle::Underline()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextStyleLetterCase(octopus::TextStyle::LetterCase &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "NONE")
        value = octopus::TextStyle::LetterCase::NONE;
    else if (str == "UPPERCASE")
        value = octopus::TextStyle::LetterCase::UPPERCASE;
    else if (str == "LOWERCASE")
        value = octopus::TextStyle::LetterCase::LOWERCASE;
    else if (str == "SMALL_CAPS")
        value = octopus::TextStyle::LetterCase::SMALL_CAPS;
    else if (str == "TITLE_CASE")
        value = octopus::TextStyle::LetterCase::TITLE_CASE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusTextStyleLetterCase(nonstd::optional<octopus::TextStyle::LetterCase> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusTextStyleLetterCase((value = octopus::TextStyle::LetterCase()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusFill(nonstd::optional<std::vector<octopus::Fill> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusFill((value = std::vector<octopus::Fill>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusVectorStroke(octopus::VectorStroke &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "fill") {
            if (Error error = parseOctopusFill(value.fill))
                return error;
        } else if (key == "thickness") {
            if (Error error = parseDouble(value.thickness))
                return error;
        } else if (key == "position") {
            if (Error error = parseOctopusStrokePosition(value.position))
                return error;
        } else if (key == "visible") {
            if (Error error = parseBool(value.visible))
                return error;
        } else if (key == "style") {
            if (Error error = parseNonstdOptionalOctopusVectorStrokeStyle(value.style))
                return error;
        } else if (key == "lineJoin") {
            if (Error error = parseNonstdOptionalOctopusVectorStrokeLineJoin(value.lineJoin))
                return error;
        } else if (key == "lineCap") {
            if (Error error = parseNonstdOptionalOctopusVectorStrokeLineCap(value.lineCap))
                return error;
        } else if (key == "miterLimit") {
            if (Error error = parseNonstdOptionalDouble(value.miterLimit))
                return error;
        } else if (key == "dashing") {
            if (Error error = parseNonstdOptionalStdVectorDouble(value.dashing))
                return error;
        } else if (key == "dashOffset") {
            if (Error error = parseNonstdOptionalDouble(value.dashOffset))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusVectorStroke(std::vector<octopus::VectorStroke> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusVectorStroke((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusVectorStroke(nonstd::optional<std::vector<octopus::VectorStroke> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusVectorStroke((value = std::vector<octopus::VectorStroke>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextStyle(octopus::TextStyle &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "font") {
            if (Error error = parseNonstdOptionalOctopusFont(value.font))
                return error;
        } else if (key == "fontSize") {
            if (Error error = parseNonstdOptionalDouble(value.fontSize))
                return error;
        } else if (key == "lineHeight") {
            if (Error error = parseNonstdOptionalDouble(value.lineHeight))
                return error;
        } else if (key == "letterSpacing") {
            if (Error error = parseNonstdOptionalDouble(value.letterSpacing))
                return error;
        } else if (key == "kerning") {
            if (Error error = parseNonstdOptionalBool(value.kerning))
                return error;
        } else if (key == "features") {
            if (Error error = parseNonstdOptionalStdVectorOctopusOpenTypeFeature(value.features))
                return error;
        } else if (key == "ligatures") {
            if (Error error = parseNonstdOptionalOctopusTextStyleLigatures(value.ligatures))
                return error;
        } else if (key == "underline") {
            if (Error error = parseNonstdOptionalOctopusTextStyleUnderline(value.underline))
                return error;
        } else if (key == "linethrough") {
            if (Error error = parseNonstdOptionalBool(value.linethrough))
                return error;
        } else if (key == "letterCase") {
            if (Error error = parseNonstdOptionalOctopusTextStyleLetterCase(value.letterCase))
                return error;
        } else if (key == "fills") {
            if (Error error = parseNonstdOptionalStdVectorOctopusFill(value.fills))
                return error;
        } else if (key == "strokes") {
            if (Error error = parseNonstdOptionalStdVectorOctopusVectorStroke(value.strokes))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusStyleRangeRange(octopus::StyleRange::Range &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "from") {
            if (Error error = parseInt(value.from))
                return error;
        } else if (key == "to") {
            if (Error error = parseInt(value.to))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusStyleRangeRange(std::vector<octopus::StyleRange::Range> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusStyleRangeRange((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusStyleRange(octopus::StyleRange &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "style") {
            if (Error error = parseOctopusTextStyle(value.style))
                return error;
        } else if (key == "ranges") {
            if (Error error = parseStdVectorOctopusStyleRangeRange(value.ranges))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusStyleRange(std::vector<octopus::StyleRange> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusStyleRange((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusStyleRange(nonstd::optional<std::vector<octopus::StyleRange> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusStyleRange((value = std::vector<octopus::StyleRange>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextFrameMode(octopus::TextFrame::Mode &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "AUTO_WIDTH")
        value = octopus::TextFrame::Mode::AUTO_WIDTH;
    else if (str == "AUTO_HEIGHT")
        value = octopus::TextFrame::Mode::AUTO_HEIGHT;
    else if (str == "FIXED")
        value = octopus::TextFrame::Mode::FIXED;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextFrame(octopus::TextFrame &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "mode") {
            if (Error error = parseOctopusTextFrameMode(value.mode))
                return error;
        } else if (key == "size") {
            if (Error error = parseNonstdOptionalOctopusDimensions(value.size))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusTextFrame(nonstd::optional<octopus::TextFrame> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusTextFrame((value = octopus::TextFrame()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextHorizontalAlign(octopus::Text::HorizontalAlign &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "LEFT")
        value = octopus::Text::HorizontalAlign::LEFT;
    else if (str == "CENTER")
        value = octopus::Text::HorizontalAlign::CENTER;
    else if (str == "RIGHT")
        value = octopus::Text::HorizontalAlign::RIGHT;
    else if (str == "JUSTIFY")
        value = octopus::Text::HorizontalAlign::JUSTIFY;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextVerticalAlign(octopus::Text::VerticalAlign &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "TOP")
        value = octopus::Text::VerticalAlign::TOP;
    else if (str == "CENTER")
        value = octopus::Text::VerticalAlign::CENTER;
    else if (str == "BOTTOM")
        value = octopus::Text::VerticalAlign::BOTTOM;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextBaselinePolicy(octopus::Text::BaselinePolicy &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "SET")
        value = octopus::Text::BaselinePolicy::SET;
    else if (str == "CENTER")
        value = octopus::Text::BaselinePolicy::CENTER;
    else if (str == "OFFSET_ASCENDER")
        value = octopus::Text::BaselinePolicy::OFFSET_ASCENDER;
    else if (str == "OFFSET_BEARING")
        value = octopus::Text::BaselinePolicy::OFFSET_BEARING;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusTextOverflowPolicy(octopus::Text::OverflowPolicy &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "NO_OVERFLOW")
        value = octopus::Text::OverflowPolicy::NO_OVERFLOW;
    else if (str == "CLIP_LINE")
        value = octopus::Text::OverflowPolicy::CLIP_LINE;
    else if (str == "EXTEND_LINE")
        value = octopus::Text::OverflowPolicy::EXTEND_LINE;
    else if (str == "EXTEND_ALL")
        value = octopus::Text::OverflowPolicy::EXTEND_ALL;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusText(octopus::Text &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "value") {
            if (Error error = parseStdString(value.value))
                return error;
        } else if (key == "defaultStyle") {
            if (Error error = parseOctopusTextStyle(value.defaultStyle))
                return error;
        } else if (key == "styles") {
            if (Error error = parseNonstdOptionalStdVectorOctopusStyleRange(value.styles))
                return error;
        } else if (key == "transform") {
            if (Error error = parseDouble_6(value.transform))
                return error;
        } else if (key == "frame") {
            if (Error error = parseNonstdOptionalOctopusTextFrame(value.frame))
                return error;
        } else if (key == "horizontalAlign") {
            if (Error error = parseOctopusTextHorizontalAlign(value.horizontalAlign))
                return error;
        } else if (key == "verticalAlign") {
            if (Error error = parseOctopusTextVerticalAlign(value.verticalAlign))
                return error;
        } else if (key == "baselinePolicy") {
            if (Error error = parseOctopusTextBaselinePolicy(value.baselinePolicy))
                return error;
        } else if (key == "overflowPolicy") {
            if (Error error = parseOctopusTextOverflowPolicy(value.overflowPolicy))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusText(nonstd::optional<octopus::Text> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusText((value = octopus::Text()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusMaskBasis(octopus::MaskBasis &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "SOLID")
        value = octopus::MaskBasis::SOLID;
    else if (str == "BODY")
        value = octopus::MaskBasis::BODY;
    else if (str == "BODY_EMBED")
        value = octopus::MaskBasis::BODY_EMBED;
    else if (str == "FILL")
        value = octopus::MaskBasis::FILL;
    else if (str == "FILL_EMBED")
        value = octopus::MaskBasis::FILL_EMBED;
    else if (str == "LAYER_AND_EFFECTS")
        value = octopus::MaskBasis::LAYER_AND_EFFECTS;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusMaskBasis(nonstd::optional<octopus::MaskBasis> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusMaskBasis((value = octopus::MaskBasis()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdArrayDouble5(std::array<double, 5> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    int i = 0;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (i == 5)
            return ErrorType::ARRAY_SIZE_MISMATCH;
        if (ErrorType error = parseDouble(value[i]))
            return error;
        ++i;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    if (i != 5)
        return ErrorType::ARRAY_SIZE_MISMATCH;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdArrayDouble5(nonstd::optional<std::array<double, 5> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdArrayDouble5((value = std::array<double, 5>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdListOctopusLayer(std::list<octopus::Layer> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusLayer((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdListOctopusLayer(nonstd::optional<std::list<octopus::Layer> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdListOctopusLayer((value = std::list<octopus::Layer>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorStdString(std::vector<std::string> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusLayerChangeSubject(octopus::LayerChange::Subject &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "LAYER")
        value = octopus::LayerChange::Subject::LAYER;
    else if (str == "SHAPE")
        value = octopus::LayerChange::Subject::SHAPE;
    else if (str == "TEXT")
        value = octopus::LayerChange::Subject::TEXT;
    else if (str == "FILL")
        value = octopus::LayerChange::Subject::FILL;
    else if (str == "STROKE")
        value = octopus::LayerChange::Subject::STROKE;
    else if (str == "STROKE_FILL")
        value = octopus::LayerChange::Subject::STROKE_FILL;
    else if (str == "EFFECT")
        value = octopus::LayerChange::Subject::EFFECT;
    else if (str == "EFFECT_FILL")
        value = octopus::LayerChange::Subject::EFFECT_FILL;
    else if (str == "FILL_FILTER")
        value = octopus::LayerChange::Subject::FILL_FILTER;
    else if (str == "STROKE_FILL_FILTER")
        value = octopus::LayerChange::Subject::STROKE_FILL_FILTER;
    else if (str == "EFFECT_FILL_FILTER")
        value = octopus::LayerChange::Subject::EFFECT_FILL_FILTER;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusLayerChangeOp(octopus::LayerChange::Op &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "PROPERTY_CHANGE")
        value = octopus::LayerChange::Op::PROPERTY_CHANGE;
    else if (str == "INSERT")
        value = octopus::LayerChange::Op::INSERT;
    else if (str == "REPLACE")
        value = octopus::LayerChange::Op::REPLACE;
    else if (str == "REMOVE")
        value = octopus::LayerChange::Op::REMOVE;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalInt(nonstd::optional<int> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseInt((value = int()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusFill(nonstd::optional<octopus::Fill> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusFill((value = octopus::Fill()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusVectorStroke(nonstd::optional<octopus::VectorStroke> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusVectorStroke((value = octopus::VectorStroke()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusEffectType(octopus::Effect::Type &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "OVERLAY")
        value = octopus::Effect::Type::OVERLAY;
    else if (str == "STROKE")
        value = octopus::Effect::Type::STROKE;
    else if (str == "DROP_SHADOW")
        value = octopus::Effect::Type::DROP_SHADOW;
    else if (str == "INNER_SHADOW")
        value = octopus::Effect::Type::INNER_SHADOW;
    else if (str == "OUTER_GLOW")
        value = octopus::Effect::Type::OUTER_GLOW;
    else if (str == "INNER_GLOW")
        value = octopus::Effect::Type::INNER_GLOW;
    else if (str == "BLUR")
        value = octopus::Effect::Type::BLUR;
    else if (str == "OTHER")
        value = octopus::Effect::Type::OTHER;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusEffectBasis(octopus::EffectBasis &value) {
    std::string str;
    if (ErrorType error = parseStdString(str))
        return error;
    if (str == "BODY")
        value = octopus::EffectBasis::BODY;
    else if (str == "BODY_AND_STROKES")
        value = octopus::EffectBasis::BODY_AND_STROKES;
    else if (str == "FILL")
        value = octopus::EffectBasis::FILL;
    else if (str == "LAYER_AND_EFFECTS")
        value = octopus::EffectBasis::LAYER_AND_EFFECTS;
    else if (str == "BACKGROUND")
        value = octopus::EffectBasis::BACKGROUND;
    else
        return ErrorType::UNKNOWN_ENUM_VALUE;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusStroke(octopus::Stroke &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "fill") {
            if (Error error = parseOctopusFill(value.fill))
                return error;
        } else if (key == "thickness") {
            if (Error error = parseDouble(value.thickness))
                return error;
        } else if (key == "position") {
            if (Error error = parseOctopusStrokePosition(value.position))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusStroke(nonstd::optional<octopus::Stroke> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusStroke((value = octopus::Stroke()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusVec2(octopus::Vec2 &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "x") {
            if (Error error = parseDouble(value.x))
                return error;
        } else if (key == "y") {
            if (Error error = parseDouble(value.y))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusShadow(octopus::Shadow &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "offset") {
            if (Error error = parseOctopusVec2(value.offset))
                return error;
        } else if (key == "blur") {
            if (Error error = parseDouble(value.blur))
                return error;
        } else if (key == "choke") {
            if (Error error = parseDouble(value.choke))
                return error;
        } else if (key == "color") {
            if (Error error = parseOctopusColor(value.color))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusShadow(nonstd::optional<octopus::Shadow> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusShadow((value = octopus::Shadow()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusEffect(octopus::Effect &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "type") {
            if (Error error = parseOctopusEffectType(value.type))
                return error;
        } else if (key == "basis") {
            if (Error error = parseOctopusEffectBasis(value.basis))
                return error;
        } else if (key == "visible") {
            if (Error error = parseBool(value.visible))
                return error;
        } else if (key == "blendMode") {
            if (Error error = parseOctopusBlendMode(value.blendMode))
                return error;
        } else if (key == "overlay") {
            if (Error error = parseNonstdOptionalOctopusFill(value.overlay))
                return error;
        } else if (key == "stroke") {
            if (Error error = parseNonstdOptionalOctopusStroke(value.stroke))
                return error;
        } else if (key == "shadow") {
            if (Error error = parseNonstdOptionalOctopusShadow(value.shadow))
                return error;
        } else if (key == "glow") {
            if (Error error = parseNonstdOptionalOctopusShadow(value.glow))
                return error;
        } else if (key == "blur") {
            if (Error error = parseNonstdOptionalDouble(value.blur))
                return error;
        } else if (key == "filters") {
            if (Error error = parseNonstdOptionalStdVectorOctopusFilter(value.filters))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusEffect(nonstd::optional<octopus::Effect> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusEffect((value = octopus::Effect()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusFilter(nonstd::optional<octopus::Filter> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusFilter((value = octopus::Filter()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusBlendMode(nonstd::optional<octopus::BlendMode> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusBlendMode((value = octopus::BlendMode()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdArrayDouble6(std::array<double, 6> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    int i = 0;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (i == 6)
            return ErrorType::ARRAY_SIZE_MISMATCH;
        if (ErrorType error = parseDouble(value[i]))
            return error;
        ++i;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    if (i != 6)
        return ErrorType::ARRAY_SIZE_MISMATCH;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdArrayDouble6(nonstd::optional<std::array<double, 6> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdArrayDouble6((value = std::array<double, 6>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusEffect(std::vector<octopus::Effect> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusEffect((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusEffect(nonstd::optional<std::vector<octopus::Effect> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusEffect((value = std::vector<octopus::Effect>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusEffectBasis(nonstd::optional<octopus::EffectBasis> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusEffectBasis((value = octopus::EffectBasis()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusStroke(std::vector<octopus::Stroke> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusStroke((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusStroke(nonstd::optional<std::vector<octopus::Stroke> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusStroke((value = std::vector<octopus::Stroke>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalOctopusTextStyle(nonstd::optional<octopus::TextStyle> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusTextStyle((value = octopus::TextStyle()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusLayerChangeValues(octopus::LayerChange::Values &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "fill") {
            if (Error error = parseNonstdOptionalOctopusFill(value.fill))
                return error;
        } else if (key == "stroke") {
            if (Error error = parseNonstdOptionalOctopusVectorStroke(value.stroke))
                return error;
        } else if (key == "effect") {
            if (Error error = parseNonstdOptionalOctopusEffect(value.effect))
                return error;
        } else if (key == "filter") {
            if (Error error = parseNonstdOptionalOctopusFilter(value.filter))
                return error;
        } else if (key == "shape") {
            if (Error error = parseNonstdOptionalOctopusShape(value.shape))
                return error;
        } else if (key == "text") {
            if (Error error = parseNonstdOptionalOctopusText(value.text))
                return error;
        } else if (key == "visible") {
            if (Error error = parseNonstdOptionalBool(value.visible))
                return error;
        } else if (key == "opacity") {
            if (Error error = parseNonstdOptionalDouble(value.opacity))
                return error;
        } else if (key == "blendMode") {
            if (Error error = parseNonstdOptionalOctopusBlendMode(value.blendMode))
                return error;
        } else if (key == "transform") {
            if (Error error = parseNonstdOptionalStdArrayDouble6(value.transform))
                return error;
        } else if (key == "featureScale") {
            if (Error error = parseNonstdOptionalDouble(value.featureScale))
                return error;
        } else if (key == "maskBasis") {
            if (Error error = parseNonstdOptionalOctopusMaskBasis(value.maskBasis))
                return error;
        } else if (key == "name") {
            if (Error error = parseNonstdOptionalStdString(value.name))
                return error;
        } else if (key == "componentId") {
            if (Error error = parseNonstdOptionalStdString(value.componentId))
                return error;
        } else if (key == "effects") {
            if (Error error = parseNonstdOptionalStdVectorOctopusEffect(value.effects))
                return error;
        } else if (key == "basis") {
            if (Error error = parseNonstdOptionalOctopusEffectBasis(value.basis))
                return error;
        } else if (key == "fills") {
            if (Error error = parseNonstdOptionalStdVectorOctopusFill(value.fills))
                return error;
        } else if (key == "strokes") {
            if (Error error = parseNonstdOptionalStdVectorOctopusStroke(value.strokes))
                return error;
        } else if (key == "fillRule") {
            if (Error error = parseNonstdOptionalOctopusShapeFillRule(value.fillRule))
                return error;
        } else if (key == "path") {
            if (Error error = parseNonstdOptionalOctopusPath(value.path))
                return error;
        } else if (key == "value") {
            if (Error error = parseNonstdOptionalStdString(value.value))
                return error;
        } else if (key == "defaultStyle") {
            if (Error error = parseNonstdOptionalOctopusTextStyle(value.defaultStyle))
                return error;
        } else if (key == "styles") {
            if (Error error = parseNonstdOptionalStdVectorOctopusStyleRange(value.styles))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusLayerChange(octopus::LayerChange &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "subject") {
            if (Error error = parseOctopusLayerChangeSubject(value.subject))
                return error;
        } else if (key == "op") {
            if (Error error = parseOctopusLayerChangeOp(value.op))
                return error;
        } else if (key == "index") {
            if (Error error = parseNonstdOptionalInt(value.index))
                return error;
        } else if (key == "filterIndex") {
            if (Error error = parseNonstdOptionalInt(value.filterIndex))
                return error;
        } else if (key == "values") {
            if (Error error = parseOctopusLayerChangeValues(value.values))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusLayerChange(std::vector<octopus::LayerChange> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusLayerChange((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusOverride(octopus::Override &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "target") {
            if (Error error = parseStdVectorStdString(value.target))
                return error;
        } else if (key == "changes") {
            if (Error error = parseStdVectorOctopusLayerChange(value.changes))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseStdVectorOctopusOverride(std::vector<octopus::Override> &value) {
    if (!matchSymbol('['))
        return ErrorType::TYPE_MISMATCH;
    value.clear();
    int separatorCheck = -1;
    while (!matchSymbol(']')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseOctopusOverride((value.emplace_back(), value.back())))
            return error;
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalStdVectorOctopusOverride(nonstd::optional<std::vector<octopus::Override> > &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseStdVectorOctopusOverride((value = std::vector<octopus::Override>()).value()))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusLayer(octopus::Layer &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "id") {
            if (Error error = parseStdString(value.id))
                return error;
        } else if (key == "type") {
            if (Error error = parseOctopusLayerType(value.type))
                return error;
        } else if (key == "name") {
            if (Error error = parseStdString(value.name))
                return error;
        } else if (key == "visible") {
            if (Error error = parseBool(value.visible))
                return error;
        } else if (key == "opacity") {
            if (Error error = parseDouble(value.opacity))
                return error;
        } else if (key == "blendMode") {
            if (Error error = parseOctopusBlendMode(value.blendMode))
                return error;
        } else if (key == "transform") {
            if (Error error = parseDouble_6(value.transform))
                return error;
        } else if (key == "featureScale") {
            if (Error error = parseNonstdOptionalDouble(value.featureScale))
                return error;
        } else if (key == "shape") {
            if (Error error = parseNonstdOptionalOctopusShape(value.shape))
                return error;
        } else if (key == "text") {
            if (Error error = parseNonstdOptionalOctopusText(value.text))
                return error;
        } else if (key == "mask") {
            if (Error error = parseNonstdOptionalPtrOctopusLayer(value.mask))
                return error;
        } else if (key == "maskBasis") {
            if (Error error = parseNonstdOptionalOctopusMaskBasis(value.maskBasis))
                return error;
        } else if (key == "maskChannels") {
            if (Error error = parseNonstdOptionalStdArrayDouble5(value.maskChannels))
                return error;
        } else if (key == "layers") {
            if (Error error = parseNonstdOptionalStdListOctopusLayer(value.layers))
                return error;
        } else if (key == "componentId") {
            if (Error error = parseNonstdOptionalStdString(value.componentId))
                return error;
        } else if (key == "overrides") {
            if (Error error = parseNonstdOptionalStdVectorOctopusOverride(value.overrides))
                return error;
        } else if (key == "effects") {
            if (Error error = parseStdVectorOctopusEffect(value.effects))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseNonstdOptionalPtrOctopusLayer(nonstd::optional_ptr<octopus::Layer> &value) {
    skipWhitespace();
    if (cur[0] == 'n' && cur[1] == 'u' && cur[2] == 'l' && cur[3] == 'l' && !isAlphanumeric(cur[4]) && cur[4] != '_' && ((cur += 4), true))
        value.reset();
    else if (Error error = parseOctopusLayer(*(value = new octopus::Layer)))
        return error;
    return ErrorType::OK;
}

Parser::ErrorType Parser::parseOctopusOctopus(octopus::Octopus &value) {
    std::string key;
    if (!matchSymbol('{'))
        return ErrorType::TYPE_MISMATCH;
    int separatorCheck = -1;
    while (!matchSymbol('}')) {
        if (!separatorCheck)
            return ErrorType::JSON_SYNTAX_ERROR;
        if (ErrorType error = parseStdString(key))
            return error;
        if (!matchSymbol(':'))
            return ErrorType::JSON_SYNTAX_ERROR;
        if (key == "type") {
            if (Error error = parseOctopusOctopusType(value.type))
                return error;
        } else if (key == "version") {
            if (Error error = parseStdString(value.version))
                return error;
        } else if (key == "id") {
            if (Error error = parseStdString(value.id))
                return error;
        } else if (key == "dimensions") {
            if (Error error = parseNonstdOptionalOctopusDimensions(value.dimensions))
                return error;
        } else if (key == "content") {
            if (Error error = parseNonstdOptionalPtrOctopusLayer(value.content))
                return error;
        } else {
            if (Error error = skipValue())
                return error;
        }
        separatorCheck = matchSymbol(',');
    }
    if (separatorCheck == 1)
        return ErrorType::JSON_SYNTAX_ERROR;
    return ErrorType::OK;
}

}
