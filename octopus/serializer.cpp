
// Generated by json-cpp-gen by Viktor Chlumsky
// https://github.com/Chlumsky/json-cpp-gen

#include "serializer.h"

#ifndef JSON_CPP_SERIALIZE_DOUBLE
#include <cstdio>
#define JSON_CPP_SERIALIZE_DOUBLE(outBuffer, x) sprintf(outBuffer, "%.17g", x)
#endif

namespace octopus {

Serializer::Error::operator Serializer::Error::Type() const {
    return type;
}

Serializer::Error::operator bool() const {
    return type != Error::OK;
}

const char *Serializer::Error::typeString() const {
    switch (type) {
        case Error::OK:
            return "OK";
        case Error::UNREPRESENTABLE_FLOAT_VALUE:
            return "UNREPRESENTABLE_FLOAT_VALUE";
        case Error::UNKNOWN_ENUM_VALUE:
            return "UNKNOWN_ENUM_VALUE";
    }
    return "";
}

Serializer::Serializer(std::string &json) : json(json) {
    json.clear();
}

void Serializer::write(char c) {
    json.push_back(c);
}

void Serializer::write(const char *str) {
    json += str;
}

void Serializer::writeEscaped(char c) {
    switch (c) {
        case '\x00': write("\\u0000"); break;
        case '\x01': write("\\u0001"); break;
        case '\x02': write("\\u0002"); break;
        case '\x03': write("\\u0003"); break;
        case '\x04': write("\\u0004"); break;
        case '\x05': write("\\u0005"); break;
        case '\x06': write("\\u0006"); break;
        case '\x07': write("\\u0007"); break;
        case '\b': write("\\b"); break;
        case '\t': write("\\t"); break;
        case '\n': write("\\n"); break;
        case '\x0b': write("\\u000b"); break;
        case '\f': write("\\f"); break;
        case '\r': write("\\r"); break;
        case '\x0e': write("\\u000e"); break;
        case '\x0f': write("\\u000f"); break;
        case '\x10': write("\\u0010"); break;
        case '\x11': write("\\u0011"); break;
        case '\x12': write("\\u0012"); break;
        case '\x13': write("\\u0013"); break;
        case '\x14': write("\\u0014"); break;
        case '\x15': write("\\u0015"); break;
        case '\x16': write("\\u0016"); break;
        case '\x17': write("\\u0017"); break;
        case '\x18': write("\\u0018"); break;
        case '\x19': write("\\u0019"); break;
        case '\x1a': write("\\u001a"); break;
        case '\x1b': write("\\u001b"); break;
        case '\x1c': write("\\u001c"); break;
        case '\x1d': write("\\u001d"); break;
        case '\x1e': write("\\u001e"); break;
        case '\x1f': write("\\u001f"); break;
        case '"': write("\\\""); break;
        case '\\': write("\\\\"); break;
        default:
            write(c);
    }
}

template <typename U, typename T>
void Serializer::writeSigned(T value) {
    if (value < 0)
        write('-'), value = -value;
    U unsignedValue = static_cast<U>(value);
    char buffer[4*(sizeof(U)+1)], *cur = &(buffer[4*(sizeof(U)+1)-1] = '\0');
    do *--cur = '0'+unsignedValue%10; while (unsignedValue /= 10);
    write(cur);
}

Serializer::Error Serializer::serialize(std::string &jsonString, octopus::Octopus const &input) {
    return Serializer(jsonString).serializeOctopusOctopus(input);
}

Serializer::Error Serializer::serialize(std::string &jsonString, octopus::Layer const &input) {
    return Serializer(jsonString).serializeOctopusLayer(input);
}

Serializer::Error Serializer::serializeOctopusOctopusType(octopus::Octopus::Type const &value) {
    switch (value) {
        case octopus::Octopus::Type::OCTOPUS_COMPONENT: write("\"OCTOPUS_COMPONENT\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeStdString(std::string const &value) {
    write('"');
    for (char c : value) { writeEscaped(c); }
    write('"');
    return Error::OK;
}

Serializer::Error Serializer::serializeDouble(double const &value) {
    char buffer[64];
    JSON_CPP_SERIALIZE_DOUBLE(buffer, value);
    switch (buffer[1]) {
        case 'i':
            write("-1e999");
            break;
        case 'n':
            if (buffer[0] == 'i') {
                write("1e999");
                break;
            }
            // fallthrough
        case 'a':
            write("\"NaN\"");
            break;
        default:
            write(buffer);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusDimensions(octopus::Dimensions const &value) {
    write("{\"" "width" "\":");
    if (Error error = serializeDouble(value.width))
        return error;
    write(",\"" "height" "\":");
    if (Error error = serializeDouble(value.height))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusLayerType(octopus::Layer::Type const &value) {
    switch (value) {
        case octopus::Layer::Type::SHAPE: write("\"SHAPE\""); break;
        case octopus::Layer::Type::TEXT: write("\"TEXT\""); break;
        case octopus::Layer::Type::GROUP: write("\"GROUP\""); break;
        case octopus::Layer::Type::MASK_GROUP: write("\"MASK_GROUP\""); break;
        case octopus::Layer::Type::COMPONENT_REFERENCE: write("\"COMPONENT_REFERENCE\""); break;
        case octopus::Layer::Type::COMPONENT_INSTANCE: write("\"COMPONENT_INSTANCE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeBool(bool const &value) {
    write(value ? "true" : "false");
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusBlendMode(octopus::BlendMode const &value) {
    switch (value) {
        case octopus::BlendMode::NORMAL: write("\"NORMAL\""); break;
        case octopus::BlendMode::PASS_THROUGH: write("\"PASS_THROUGH\""); break;
        case octopus::BlendMode::COLOR: write("\"COLOR\""); break;
        case octopus::BlendMode::COLOR_BURN: write("\"COLOR_BURN\""); break;
        case octopus::BlendMode::COLOR_DODGE: write("\"COLOR_DODGE\""); break;
        case octopus::BlendMode::DARKEN: write("\"DARKEN\""); break;
        case octopus::BlendMode::DARKER_COLOR: write("\"DARKER_COLOR\""); break;
        case octopus::BlendMode::DIFFERENCE: write("\"DIFFERENCE\""); break;
        case octopus::BlendMode::DIVIDE: write("\"DIVIDE\""); break;
        case octopus::BlendMode::EXCLUSION: write("\"EXCLUSION\""); break;
        case octopus::BlendMode::HARD_LIGHT: write("\"HARD_LIGHT\""); break;
        case octopus::BlendMode::HARD_MIX: write("\"HARD_MIX\""); break;
        case octopus::BlendMode::HUE: write("\"HUE\""); break;
        case octopus::BlendMode::LIGHTEN: write("\"LIGHTEN\""); break;
        case octopus::BlendMode::LIGHTER_COLOR: write("\"LIGHTER_COLOR\""); break;
        case octopus::BlendMode::LINEAR_BURN: write("\"LINEAR_BURN\""); break;
        case octopus::BlendMode::LINEAR_DODGE: write("\"LINEAR_DODGE\""); break;
        case octopus::BlendMode::LINEAR_LIGHT: write("\"LINEAR_LIGHT\""); break;
        case octopus::BlendMode::LUMINOSITY: write("\"LUMINOSITY\""); break;
        case octopus::BlendMode::MULTIPLY: write("\"MULTIPLY\""); break;
        case octopus::BlendMode::OVERLAY: write("\"OVERLAY\""); break;
        case octopus::BlendMode::PIN_LIGHT: write("\"PIN_LIGHT\""); break;
        case octopus::BlendMode::SATURATION: write("\"SATURATION\""); break;
        case octopus::BlendMode::SCREEN: write("\"SCREEN\""); break;
        case octopus::BlendMode::SOFT_LIGHT: write("\"SOFT_LIGHT\""); break;
        case octopus::BlendMode::SUBTRACT: write("\"SUBTRACT\""); break;
        case octopus::BlendMode::VIVID_LIGHT: write("\"VIVID_LIGHT\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeDouble_6(double const value[6]) {
    write('[');
    if (Error error = serializeDouble(value[0]))
        return error;
    for (int i = 1; i < 6; ++i) {
        write(',');
        if (Error error = serializeDouble(value[i]))
            return error;
    }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusShapeFillRule(octopus::Shape::FillRule const &value) {
    switch (value) {
        case octopus::Shape::FillRule::EVEN_ODD: write("\"EVEN_ODD\""); break;
        case octopus::Shape::FillRule::NON_ZERO: write("\"NON_ZERO\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusPathType(octopus::Path::Type const &value) {
    switch (value) {
        case octopus::Path::Type::PATH: write("\"PATH\""); break;
        case octopus::Path::Type::RECTANGLE: write("\"RECTANGLE\""); break;
        case octopus::Path::Type::COMPOUND: write("\"COMPOUND\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusPathOp(octopus::Path::Op const &value) {
    switch (value) {
        case octopus::Path::Op::UNION: write("\"UNION\""); break;
        case octopus::Path::Op::INTERSECT: write("\"INTERSECT\""); break;
        case octopus::Path::Op::SUBTRACT: write("\"SUBTRACT\""); break;
        case octopus::Path::Op::EXCLUDE: write("\"EXCLUDE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusPath(std::vector<octopus::Path> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Path const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusPath(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusRectangle(octopus::Rectangle const &value) {
    write("{\"" "x0" "\":");
    if (Error error = serializeDouble(value.x0))
        return error;
    write(",\"" "y0" "\":");
    if (Error error = serializeDouble(value.y0))
        return error;
    write(",\"" "x1" "\":");
    if (Error error = serializeDouble(value.x1))
        return error;
    write(",\"" "y1" "\":");
    if (Error error = serializeDouble(value.y1))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorDouble(std::vector<double> const &value) {
    bool prev = false;
    write('[');
    for (double const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeDouble(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusPath(octopus::Path const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusPathType(value.type))
        return error;
    write(",\"" "visible" "\":");
    if (Error error = serializeBool(value.visible))
        return error;
    if (value.op.has_value()) {
        write(",\"" "op" "\":");
        if (Error error = serializeOctopusPathOp(value.op.value()))
            return error;
    }
    if (value.geometry.has_value()) {
        write(",\"" "geometry" "\":");
        if (Error error = serializeStdString(value.geometry.value()))
            return error;
    }
    if (value.paths.has_value()) {
        write(",\"" "paths" "\":");
        if (Error error = serializeStdVectorOctopusPath(value.paths.value()))
            return error;
    }
    if (value.rectangle.has_value()) {
        write(",\"" "rectangle" "\":");
        if (Error error = serializeOctopusRectangle(value.rectangle.value()))
            return error;
    }
    if (value.cornerRadius.has_value()) {
        write(",\"" "cornerRadius" "\":");
        if (Error error = serializeDouble(value.cornerRadius.value()))
            return error;
    }
    if (value.cornerRadii.has_value()) {
        write(",\"" "cornerRadii" "\":");
        if (Error error = serializeStdVectorDouble(value.cornerRadii.value()))
            return error;
    }
    write(",\"" "transform" "\":");
    if (Error error = serializeDouble_6(value.transform))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFillType(octopus::Fill::Type const &value) {
    switch (value) {
        case octopus::Fill::Type::COLOR: write("\"COLOR\""); break;
        case octopus::Fill::Type::GRADIENT: write("\"GRADIENT\""); break;
        case octopus::Fill::Type::IMAGE: write("\"IMAGE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusColor(octopus::Color const &value) {
    write("{\"" "r" "\":");
    if (Error error = serializeDouble(value.r))
        return error;
    write(",\"" "g" "\":");
    if (Error error = serializeDouble(value.g))
        return error;
    write(",\"" "b" "\":");
    if (Error error = serializeDouble(value.b))
        return error;
    write(",\"" "a" "\":");
    if (Error error = serializeDouble(value.a))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusGradientType(octopus::Gradient::Type const &value) {
    switch (value) {
        case octopus::Gradient::Type::LINEAR: write("\"LINEAR\""); break;
        case octopus::Gradient::Type::RADIAL: write("\"RADIAL\""); break;
        case octopus::Gradient::Type::ANGULAR: write("\"ANGULAR\""); break;
        case octopus::Gradient::Type::DIAMOND: write("\"DIAMOND\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusGradientInterpolation(octopus::Gradient::Interpolation const &value) {
    switch (value) {
        case octopus::Gradient::Interpolation::LINEAR: write("\"LINEAR\""); break;
        case octopus::Gradient::Interpolation::POWER: write("\"POWER\""); break;
        case octopus::Gradient::Interpolation::REVERSE_POWER: write("\"REVERSE_POWER\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusGradientColorStop(octopus::Gradient::ColorStop const &value) {
    write("{\"" "position" "\":");
    if (Error error = serializeDouble(value.position))
        return error;
    write(",\"" "interpolation" "\":");
    if (Error error = serializeOctopusGradientInterpolation(value.interpolation))
        return error;
    if (value.interpolationParameter.has_value()) {
        write(",\"" "interpolationParameter" "\":");
        if (Error error = serializeDouble(value.interpolationParameter.value()))
            return error;
    }
    write(",\"" "color" "\":");
    if (Error error = serializeOctopusColor(value.color))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusGradientColorStop(std::vector<octopus::Gradient::ColorStop> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Gradient::ColorStop const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusGradientColorStop(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusGradient(octopus::Gradient const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusGradientType(value.type))
        return error;
    write(",\"" "stops" "\":");
    if (Error error = serializeStdVectorOctopusGradientColorStop(value.stops))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusImageRefType(octopus::ImageRef::Type const &value) {
    switch (value) {
        case octopus::ImageRef::Type::PATH: write("\"PATH\""); break;
        case octopus::ImageRef::Type::RESOURCE_REF: write("\"RESOURCE_REF\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusImageRef(octopus::ImageRef const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusImageRefType(value.type))
        return error;
    write(",\"" "value" "\":");
    if (Error error = serializeStdString(value.value))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusImage(octopus::Image const &value) {
    write("{\"" "ref" "\":");
    if (Error error = serializeOctopusImageRef(value.ref))
        return error;
    if (value.subsection.has_value()) {
        write(",\"" "subsection" "\":");
        if (Error error = serializeOctopusRectangle(value.subsection.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFillPositioningLayout(octopus::Fill::Positioning::Layout const &value) {
    switch (value) {
        case octopus::Fill::Positioning::Layout::STRETCH: write("\"STRETCH\""); break;
        case octopus::Fill::Positioning::Layout::FILL: write("\"FILL\""); break;
        case octopus::Fill::Positioning::Layout::FIT: write("\"FIT\""); break;
        case octopus::Fill::Positioning::Layout::TILE: write("\"TILE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFillPositioningOrigin(octopus::Fill::Positioning::Origin const &value) {
    switch (value) {
        case octopus::Fill::Positioning::Origin::LAYER: write("\"LAYER\""); break;
        case octopus::Fill::Positioning::Origin::PARENT: write("\"PARENT\""); break;
        case octopus::Fill::Positioning::Origin::COMPONENT: write("\"COMPONENT\""); break;
        case octopus::Fill::Positioning::Origin::ARTBOARD: write("\"ARTBOARD\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFillPositioning(octopus::Fill::Positioning const &value) {
    write("{\"" "layout" "\":");
    if (Error error = serializeOctopusFillPositioningLayout(value.layout))
        return error;
    write(",\"" "origin" "\":");
    if (Error error = serializeOctopusFillPositioningOrigin(value.origin))
        return error;
    write(",\"" "transform" "\":");
    if (Error error = serializeDouble_6(value.transform))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFilterType(octopus::Filter::Type const &value) {
    switch (value) {
        case octopus::Filter::Type::OPACITY_MULTIPLIER: write("\"OPACITY_MULTIPLIER\""); break;
        case octopus::Filter::Type::XD_BRIGHTNESS_ADJUSTMENT: write("\"XD_BRIGHTNESS_ADJUSTMENT\""); break;
        case octopus::Filter::Type::SKETCH_BRIGHTNESS_ADJUSTMENT: write("\"SKETCH_BRIGHTNESS_ADJUSTMENT\""); break;
        case octopus::Filter::Type::SKETCH_COLOR_ADJUSTMENT: write("\"SKETCH_COLOR_ADJUSTMENT\""); break;
        case octopus::Filter::Type::FIGMA_COLOR_ADJUSTMENT: write("\"FIGMA_COLOR_ADJUSTMENT\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusColorAdjustment(octopus::ColorAdjustment const &value) {
    write("{\"" "hue" "\":");
    if (Error error = serializeDouble(value.hue))
        return error;
    write(",\"" "saturation" "\":");
    if (Error error = serializeDouble(value.saturation))
        return error;
    write(",\"" "brightness" "\":");
    if (Error error = serializeDouble(value.brightness))
        return error;
    write(",\"" "contrast" "\":");
    if (Error error = serializeDouble(value.contrast))
        return error;
    write(",\"" "exposure" "\":");
    if (Error error = serializeDouble(value.exposure))
        return error;
    write(",\"" "temperature" "\":");
    if (Error error = serializeDouble(value.temperature))
        return error;
    write(",\"" "tint" "\":");
    if (Error error = serializeDouble(value.tint))
        return error;
    write(",\"" "highlights" "\":");
    if (Error error = serializeDouble(value.highlights))
        return error;
    write(",\"" "shadows" "\":");
    if (Error error = serializeDouble(value.shadows))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFilter(octopus::Filter const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusFilterType(value.type))
        return error;
    write(",\"" "visible" "\":");
    if (Error error = serializeBool(value.visible))
        return error;
    if (value.opacity.has_value()) {
        write(",\"" "opacity" "\":");
        if (Error error = serializeDouble(value.opacity.value()))
            return error;
    }
    if (value.brightness.has_value()) {
        write(",\"" "brightness" "\":");
        if (Error error = serializeDouble(value.brightness.value()))
            return error;
    }
    if (value.colorAdjustment.has_value()) {
        write(",\"" "colorAdjustment" "\":");
        if (Error error = serializeOctopusColorAdjustment(value.colorAdjustment.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusFilter(std::vector<octopus::Filter> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Filter const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusFilter(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFill(octopus::Fill const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusFillType(value.type))
        return error;
    write(",\"" "visible" "\":");
    if (Error error = serializeBool(value.visible))
        return error;
    write(",\"" "blendMode" "\":");
    if (Error error = serializeOctopusBlendMode(value.blendMode))
        return error;
    if (value.color.has_value()) {
        write(",\"" "color" "\":");
        if (Error error = serializeOctopusColor(value.color.value()))
            return error;
    }
    if (value.gradient.has_value()) {
        write(",\"" "gradient" "\":");
        if (Error error = serializeOctopusGradient(value.gradient.value()))
            return error;
    }
    if (value.image.has_value()) {
        write(",\"" "image" "\":");
        if (Error error = serializeOctopusImage(value.image.value()))
            return error;
    }
    if (value.positioning.has_value()) {
        write(",\"" "positioning" "\":");
        if (Error error = serializeOctopusFillPositioning(value.positioning.value()))
            return error;
    }
    if (value.filters.has_value()) {
        write(",\"" "filters" "\":");
        if (Error error = serializeStdVectorOctopusFilter(value.filters.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusFill(std::vector<octopus::Fill> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Fill const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusFill(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusStrokePosition(octopus::Stroke::Position const &value) {
    switch (value) {
        case octopus::Stroke::Position::OUTSIDE: write("\"OUTSIDE\""); break;
        case octopus::Stroke::Position::CENTER: write("\"CENTER\""); break;
        case octopus::Stroke::Position::INSIDE: write("\"INSIDE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusVectorStrokeStyle(octopus::VectorStroke::Style const &value) {
    switch (value) {
        case octopus::VectorStroke::Style::SOLID: write("\"SOLID\""); break;
        case octopus::VectorStroke::Style::DASHED: write("\"DASHED\""); break;
        case octopus::VectorStroke::Style::DOTTED: write("\"DOTTED\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusVectorStrokeLineJoin(octopus::VectorStroke::LineJoin const &value) {
    switch (value) {
        case octopus::VectorStroke::LineJoin::MITER: write("\"MITER\""); break;
        case octopus::VectorStroke::LineJoin::ROUND: write("\"ROUND\""); break;
        case octopus::VectorStroke::LineJoin::BEVEL: write("\"BEVEL\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusVectorStrokeLineCap(octopus::VectorStroke::LineCap const &value) {
    switch (value) {
        case octopus::VectorStroke::LineCap::BUTT: write("\"BUTT\""); break;
        case octopus::VectorStroke::LineCap::ROUND: write("\"ROUND\""); break;
        case octopus::VectorStroke::LineCap::SQUARE: write("\"SQUARE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusShapeStroke(octopus::Shape::Stroke const &value) {
    write("{\"" "fill" "\":");
    if (Error error = serializeOctopusFill(value.fill))
        return error;
    write(",\"" "thickness" "\":");
    if (Error error = serializeDouble(value.thickness))
        return error;
    write(",\"" "position" "\":");
    if (Error error = serializeOctopusStrokePosition(value.position))
        return error;
    write(",\"" "visible" "\":");
    if (Error error = serializeBool(value.visible))
        return error;
    if (value.style.has_value()) {
        write(",\"" "style" "\":");
        if (Error error = serializeOctopusVectorStrokeStyle(value.style.value()))
            return error;
    }
    if (value.lineJoin.has_value()) {
        write(",\"" "lineJoin" "\":");
        if (Error error = serializeOctopusVectorStrokeLineJoin(value.lineJoin.value()))
            return error;
    }
    if (value.lineCap.has_value()) {
        write(",\"" "lineCap" "\":");
        if (Error error = serializeOctopusVectorStrokeLineCap(value.lineCap.value()))
            return error;
    }
    if (value.miterLimit.has_value()) {
        write(",\"" "miterLimit" "\":");
        if (Error error = serializeDouble(value.miterLimit.value()))
            return error;
    }
    if (value.dashing.has_value()) {
        write(",\"" "dashing" "\":");
        if (Error error = serializeStdVectorDouble(value.dashing.value()))
            return error;
    }
    if (value.dashOffset.has_value()) {
        write(",\"" "dashOffset" "\":");
        if (Error error = serializeDouble(value.dashOffset.value()))
            return error;
    }
    if (value.fillRule.has_value()) {
        write(",\"" "fillRule" "\":");
        if (Error error = serializeOctopusShapeFillRule(value.fillRule.value()))
            return error;
    }
    if (value.path.has_value()) {
        write(",\"" "path" "\":");
        if (Error error = serializeOctopusPath(value.path.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusShapeStroke(std::vector<octopus::Shape::Stroke> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Shape::Stroke const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusShapeStroke(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusShape(octopus::Shape const &value) {
    bool prev = false;
    write('{');
    if (value.fillRule.has_value()) {
        write("\"" "fillRule" "\":");
        if (Error error = serializeOctopusShapeFillRule(value.fillRule.value()))
            return error;
        prev = true;
    }
    if (value.path.has_value()) {
        if (prev)
            write(',');
        write("\"" "path" "\":");
        if (Error error = serializeOctopusPath(value.path.value()))
            return error;
        prev = true;
    }
    if (prev)
        write(',');
    write("\"" "fills" "\":");
    if (Error error = serializeStdVectorOctopusFill(value.fills))
        return error;
    write(",\"" "strokes" "\":");
    if (Error error = serializeStdVectorOctopusShapeStroke(value.strokes))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusFont(octopus::Font const &value) {
    write("{\"" "postScriptName" "\":");
    if (Error error = serializeStdString(value.postScriptName))
        return error;
    if (value.family.has_value()) {
        write(",\"" "family" "\":");
        if (Error error = serializeStdString(value.family.value()))
            return error;
    }
    if (value.style.has_value()) {
        write(",\"" "style" "\":");
        if (Error error = serializeStdString(value.style.value()))
            return error;
    }
    if (value.syntheticPostScriptName.has_value()) {
        write(",\"" "syntheticPostScriptName" "\":");
        if (Error error = serializeBool(value.syntheticPostScriptName.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeInt(int const &value) {
    writeSigned<unsigned>(value);
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusOpenTypeFeature(octopus::OpenTypeFeature const &value) {
    write("{\"" "tag" "\":");
    if (Error error = serializeStdString(value.tag))
        return error;
    write(",\"" "value" "\":");
    if (Error error = serializeInt(value.value))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusOpenTypeFeature(std::vector<octopus::OpenTypeFeature> const &value) {
    bool prev = false;
    write('[');
    for (octopus::OpenTypeFeature const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusOpenTypeFeature(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextStyleLigatures(octopus::TextStyle::Ligatures const &value) {
    switch (value) {
        case octopus::TextStyle::Ligatures::NONE: write("\"NONE\""); break;
        case octopus::TextStyle::Ligatures::STANDARD: write("\"STANDARD\""); break;
        case octopus::TextStyle::Ligatures::ALL: write("\"ALL\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextStyleUnderline(octopus::TextStyle::Underline const &value) {
    switch (value) {
        case octopus::TextStyle::Underline::NONE: write("\"NONE\""); break;
        case octopus::TextStyle::Underline::SINGLE: write("\"SINGLE\""); break;
        case octopus::TextStyle::Underline::DOUBLE: write("\"DOUBLE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextStyleLetterCase(octopus::TextStyle::LetterCase const &value) {
    switch (value) {
        case octopus::TextStyle::LetterCase::NONE: write("\"NONE\""); break;
        case octopus::TextStyle::LetterCase::UPPERCASE: write("\"UPPERCASE\""); break;
        case octopus::TextStyle::LetterCase::LOWERCASE: write("\"LOWERCASE\""); break;
        case octopus::TextStyle::LetterCase::SMALL_CAPS: write("\"SMALL_CAPS\""); break;
        case octopus::TextStyle::LetterCase::TITLE_CASE: write("\"TITLE_CASE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusVectorStroke(octopus::VectorStroke const &value) {
    write("{\"" "fill" "\":");
    if (Error error = serializeOctopusFill(value.fill))
        return error;
    write(",\"" "thickness" "\":");
    if (Error error = serializeDouble(value.thickness))
        return error;
    write(",\"" "position" "\":");
    if (Error error = serializeOctopusStrokePosition(value.position))
        return error;
    write(",\"" "visible" "\":");
    if (Error error = serializeBool(value.visible))
        return error;
    if (value.style.has_value()) {
        write(",\"" "style" "\":");
        if (Error error = serializeOctopusVectorStrokeStyle(value.style.value()))
            return error;
    }
    if (value.lineJoin.has_value()) {
        write(",\"" "lineJoin" "\":");
        if (Error error = serializeOctopusVectorStrokeLineJoin(value.lineJoin.value()))
            return error;
    }
    if (value.lineCap.has_value()) {
        write(",\"" "lineCap" "\":");
        if (Error error = serializeOctopusVectorStrokeLineCap(value.lineCap.value()))
            return error;
    }
    if (value.miterLimit.has_value()) {
        write(",\"" "miterLimit" "\":");
        if (Error error = serializeDouble(value.miterLimit.value()))
            return error;
    }
    if (value.dashing.has_value()) {
        write(",\"" "dashing" "\":");
        if (Error error = serializeStdVectorDouble(value.dashing.value()))
            return error;
    }
    if (value.dashOffset.has_value()) {
        write(",\"" "dashOffset" "\":");
        if (Error error = serializeDouble(value.dashOffset.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusVectorStroke(std::vector<octopus::VectorStroke> const &value) {
    bool prev = false;
    write('[');
    for (octopus::VectorStroke const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusVectorStroke(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextStyle(octopus::TextStyle const &value) {
    bool prev = false;
    write('{');
    if (value.font.has_value()) {
        write("\"" "font" "\":");
        if (Error error = serializeOctopusFont(value.font.value()))
            return error;
        prev = true;
    }
    if (value.fontSize.has_value()) {
        if (prev)
            write(',');
        write("\"" "fontSize" "\":");
        if (Error error = serializeDouble(value.fontSize.value()))
            return error;
        prev = true;
    }
    if (value.lineHeight.has_value()) {
        if (prev)
            write(',');
        write("\"" "lineHeight" "\":");
        if (Error error = serializeDouble(value.lineHeight.value()))
            return error;
        prev = true;
    }
    if (value.letterSpacing.has_value()) {
        if (prev)
            write(',');
        write("\"" "letterSpacing" "\":");
        if (Error error = serializeDouble(value.letterSpacing.value()))
            return error;
        prev = true;
    }
    if (value.kerning.has_value()) {
        if (prev)
            write(',');
        write("\"" "kerning" "\":");
        if (Error error = serializeBool(value.kerning.value()))
            return error;
        prev = true;
    }
    if (value.features.has_value()) {
        if (prev)
            write(',');
        write("\"" "features" "\":");
        if (Error error = serializeStdVectorOctopusOpenTypeFeature(value.features.value()))
            return error;
        prev = true;
    }
    if (value.ligatures.has_value()) {
        if (prev)
            write(',');
        write("\"" "ligatures" "\":");
        if (Error error = serializeOctopusTextStyleLigatures(value.ligatures.value()))
            return error;
        prev = true;
    }
    if (value.underline.has_value()) {
        if (prev)
            write(',');
        write("\"" "underline" "\":");
        if (Error error = serializeOctopusTextStyleUnderline(value.underline.value()))
            return error;
        prev = true;
    }
    if (value.linethrough.has_value()) {
        if (prev)
            write(',');
        write("\"" "linethrough" "\":");
        if (Error error = serializeBool(value.linethrough.value()))
            return error;
        prev = true;
    }
    if (value.letterCase.has_value()) {
        if (prev)
            write(',');
        write("\"" "letterCase" "\":");
        if (Error error = serializeOctopusTextStyleLetterCase(value.letterCase.value()))
            return error;
        prev = true;
    }
    if (value.fills.has_value()) {
        if (prev)
            write(',');
        write("\"" "fills" "\":");
        if (Error error = serializeStdVectorOctopusFill(value.fills.value()))
            return error;
        prev = true;
    }
    if (value.strokes.has_value()) {
        if (prev)
            write(',');
        write("\"" "strokes" "\":");
        if (Error error = serializeStdVectorOctopusVectorStroke(value.strokes.value()))
            return error;
        prev = true;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusStyleRangeRange(octopus::StyleRange::Range const &value) {
    write("{\"" "from" "\":");
    if (Error error = serializeInt(value.from))
        return error;
    write(",\"" "to" "\":");
    if (Error error = serializeInt(value.to))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusStyleRangeRange(std::vector<octopus::StyleRange::Range> const &value) {
    bool prev = false;
    write('[');
    for (octopus::StyleRange::Range const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusStyleRangeRange(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusStyleRange(octopus::StyleRange const &value) {
    write("{\"" "style" "\":");
    if (Error error = serializeOctopusTextStyle(value.style))
        return error;
    write(",\"" "ranges" "\":");
    if (Error error = serializeStdVectorOctopusStyleRangeRange(value.ranges))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusStyleRange(std::vector<octopus::StyleRange> const &value) {
    bool prev = false;
    write('[');
    for (octopus::StyleRange const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusStyleRange(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextFrameMode(octopus::TextFrame::Mode const &value) {
    switch (value) {
        case octopus::TextFrame::Mode::AUTO_WIDTH: write("\"AUTO_WIDTH\""); break;
        case octopus::TextFrame::Mode::AUTO_HEIGHT: write("\"AUTO_HEIGHT\""); break;
        case octopus::TextFrame::Mode::FIXED: write("\"FIXED\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextFrame(octopus::TextFrame const &value) {
    write("{\"" "mode" "\":");
    if (Error error = serializeOctopusTextFrameMode(value.mode))
        return error;
    if (value.size.has_value()) {
        write(",\"" "size" "\":");
        if (Error error = serializeOctopusDimensions(value.size.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextHorizontalAlign(octopus::Text::HorizontalAlign const &value) {
    switch (value) {
        case octopus::Text::HorizontalAlign::LEFT: write("\"LEFT\""); break;
        case octopus::Text::HorizontalAlign::CENTER: write("\"CENTER\""); break;
        case octopus::Text::HorizontalAlign::RIGHT: write("\"RIGHT\""); break;
        case octopus::Text::HorizontalAlign::JUSTIFY: write("\"JUSTIFY\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextVerticalAlign(octopus::Text::VerticalAlign const &value) {
    switch (value) {
        case octopus::Text::VerticalAlign::TOP: write("\"TOP\""); break;
        case octopus::Text::VerticalAlign::CENTER: write("\"CENTER\""); break;
        case octopus::Text::VerticalAlign::BOTTOM: write("\"BOTTOM\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextBaselinePolicy(octopus::Text::BaselinePolicy const &value) {
    switch (value) {
        case octopus::Text::BaselinePolicy::SET: write("\"SET\""); break;
        case octopus::Text::BaselinePolicy::CENTER: write("\"CENTER\""); break;
        case octopus::Text::BaselinePolicy::OFFSET_ASCENDER: write("\"OFFSET_ASCENDER\""); break;
        case octopus::Text::BaselinePolicy::OFFSET_BEARING: write("\"OFFSET_BEARING\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusTextOverflowPolicy(octopus::Text::OverflowPolicy const &value) {
    switch (value) {
        case octopus::Text::OverflowPolicy::NO_OVERFLOW: write("\"NO_OVERFLOW\""); break;
        case octopus::Text::OverflowPolicy::CLIP_LINE: write("\"CLIP_LINE\""); break;
        case octopus::Text::OverflowPolicy::EXTEND_LINE: write("\"EXTEND_LINE\""); break;
        case octopus::Text::OverflowPolicy::EXTEND_ALL: write("\"EXTEND_ALL\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusText(octopus::Text const &value) {
    write("{\"" "value" "\":");
    if (Error error = serializeStdString(value.value))
        return error;
    write(",\"" "defaultStyle" "\":");
    if (Error error = serializeOctopusTextStyle(value.defaultStyle))
        return error;
    if (value.styles.has_value()) {
        write(",\"" "styles" "\":");
        if (Error error = serializeStdVectorOctopusStyleRange(value.styles.value()))
            return error;
    }
    write(",\"" "transform" "\":");
    if (Error error = serializeDouble_6(value.transform))
        return error;
    if (value.frame.has_value()) {
        write(",\"" "frame" "\":");
        if (Error error = serializeOctopusTextFrame(value.frame.value()))
            return error;
    }
    write(",\"" "horizontalAlign" "\":");
    if (Error error = serializeOctopusTextHorizontalAlign(value.horizontalAlign))
        return error;
    write(",\"" "verticalAlign" "\":");
    if (Error error = serializeOctopusTextVerticalAlign(value.verticalAlign))
        return error;
    write(",\"" "baselinePolicy" "\":");
    if (Error error = serializeOctopusTextBaselinePolicy(value.baselinePolicy))
        return error;
    write(",\"" "overflowPolicy" "\":");
    if (Error error = serializeOctopusTextOverflowPolicy(value.overflowPolicy))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusMaskBasis(octopus::MaskBasis const &value) {
    switch (value) {
        case octopus::MaskBasis::SOLID: write("\"SOLID\""); break;
        case octopus::MaskBasis::BODY: write("\"BODY\""); break;
        case octopus::MaskBasis::BODY_EMBED: write("\"BODY_EMBED\""); break;
        case octopus::MaskBasis::FILL: write("\"FILL\""); break;
        case octopus::MaskBasis::FILL_EMBED: write("\"FILL_EMBED\""); break;
        case octopus::MaskBasis::LAYER_AND_EFFECTS: write("\"LAYER_AND_EFFECTS\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeStdArrayDouble5(std::array<double, 5> const &value) {
    write('[');
    if (Error error = serializeDouble(value[0]))
        return error;
    for (int i = 1; i < 5; ++i) {
        write(',');
        if (Error error = serializeDouble(value[i]))
            return error;
    }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdListOctopusLayer(std::list<octopus::Layer> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Layer const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusLayer(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorStdString(std::vector<std::string> const &value) {
    bool prev = false;
    write('[');
    for (std::string const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeStdString(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusLayerChangeSubject(octopus::LayerChange::Subject const &value) {
    switch (value) {
        case octopus::LayerChange::Subject::LAYER: write("\"LAYER\""); break;
        case octopus::LayerChange::Subject::SHAPE: write("\"SHAPE\""); break;
        case octopus::LayerChange::Subject::TEXT: write("\"TEXT\""); break;
        case octopus::LayerChange::Subject::FILL: write("\"FILL\""); break;
        case octopus::LayerChange::Subject::STROKE: write("\"STROKE\""); break;
        case octopus::LayerChange::Subject::STROKE_FILL: write("\"STROKE_FILL\""); break;
        case octopus::LayerChange::Subject::EFFECT: write("\"EFFECT\""); break;
        case octopus::LayerChange::Subject::EFFECT_FILL: write("\"EFFECT_FILL\""); break;
        case octopus::LayerChange::Subject::FILL_FILTER: write("\"FILL_FILTER\""); break;
        case octopus::LayerChange::Subject::STROKE_FILL_FILTER: write("\"STROKE_FILL_FILTER\""); break;
        case octopus::LayerChange::Subject::EFFECT_FILL_FILTER: write("\"EFFECT_FILL_FILTER\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusLayerChangeOp(octopus::LayerChange::Op const &value) {
    switch (value) {
        case octopus::LayerChange::Op::PROPERTY_CHANGE: write("\"PROPERTY_CHANGE\""); break;
        case octopus::LayerChange::Op::INSERT: write("\"INSERT\""); break;
        case octopus::LayerChange::Op::REPLACE: write("\"REPLACE\""); break;
        case octopus::LayerChange::Op::REMOVE: write("\"REMOVE\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusEffectType(octopus::Effect::Type const &value) {
    switch (value) {
        case octopus::Effect::Type::OVERLAY: write("\"OVERLAY\""); break;
        case octopus::Effect::Type::STROKE: write("\"STROKE\""); break;
        case octopus::Effect::Type::DROP_SHADOW: write("\"DROP_SHADOW\""); break;
        case octopus::Effect::Type::INNER_SHADOW: write("\"INNER_SHADOW\""); break;
        case octopus::Effect::Type::GAUSSIAN_BLUR: write("\"GAUSSIAN_BLUR\""); break;
        case octopus::Effect::Type::BOUNDED_BLUR: write("\"BOUNDED_BLUR\""); break;
        case octopus::Effect::Type::BLUR: write("\"BLUR\""); break;
        case octopus::Effect::Type::OTHER: write("\"OTHER\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusEffectBasis(octopus::EffectBasis const &value) {
    switch (value) {
        case octopus::EffectBasis::BODY: write("\"BODY\""); break;
        case octopus::EffectBasis::BODY_AND_STROKES: write("\"BODY_AND_STROKES\""); break;
        case octopus::EffectBasis::FILL: write("\"FILL\""); break;
        case octopus::EffectBasis::LAYER_AND_EFFECTS: write("\"LAYER_AND_EFFECTS\""); break;
        case octopus::EffectBasis::BACKGROUND: write("\"BACKGROUND\""); break;
        default:
            return Error(Error::UNKNOWN_ENUM_VALUE, &value);
    }
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusStroke(octopus::Stroke const &value) {
    write("{\"" "fill" "\":");
    if (Error error = serializeOctopusFill(value.fill))
        return error;
    write(",\"" "thickness" "\":");
    if (Error error = serializeDouble(value.thickness))
        return error;
    write(",\"" "position" "\":");
    if (Error error = serializeOctopusStrokePosition(value.position))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusVec2(octopus::Vec2 const &value) {
    write("{\"" "x" "\":");
    if (Error error = serializeDouble(value.x))
        return error;
    write(",\"" "y" "\":");
    if (Error error = serializeDouble(value.y))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusShadow(octopus::Shadow const &value) {
    write("{\"" "offset" "\":");
    if (Error error = serializeOctopusVec2(value.offset))
        return error;
    write(",\"" "blur" "\":");
    if (Error error = serializeDouble(value.blur))
        return error;
    write(",\"" "choke" "\":");
    if (Error error = serializeDouble(value.choke))
        return error;
    write(",\"" "color" "\":");
    if (Error error = serializeOctopusColor(value.color))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusEffect(octopus::Effect const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusEffectType(value.type))
        return error;
    write(",\"" "basis" "\":");
    if (Error error = serializeOctopusEffectBasis(value.basis))
        return error;
    write(",\"" "visible" "\":");
    if (Error error = serializeBool(value.visible))
        return error;
    write(",\"" "blendMode" "\":");
    if (Error error = serializeOctopusBlendMode(value.blendMode))
        return error;
    if (value.overlay.has_value()) {
        write(",\"" "overlay" "\":");
        if (Error error = serializeOctopusFill(value.overlay.value()))
            return error;
    }
    if (value.stroke.has_value()) {
        write(",\"" "stroke" "\":");
        if (Error error = serializeOctopusStroke(value.stroke.value()))
            return error;
    }
    if (value.shadow.has_value()) {
        write(",\"" "shadow" "\":");
        if (Error error = serializeOctopusShadow(value.shadow.value()))
            return error;
    }
    if (value.blur.has_value()) {
        write(",\"" "blur" "\":");
        if (Error error = serializeDouble(value.blur.value()))
            return error;
    }
    if (value.filters.has_value()) {
        write(",\"" "filters" "\":");
        if (Error error = serializeStdVectorOctopusFilter(value.filters.value()))
            return error;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdArrayDouble6(std::array<double, 6> const &value) {
    write('[');
    if (Error error = serializeDouble(value[0]))
        return error;
    for (int i = 1; i < 6; ++i) {
        write(',');
        if (Error error = serializeDouble(value[i]))
            return error;
    }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusEffect(std::vector<octopus::Effect> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Effect const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusEffect(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusStroke(std::vector<octopus::Stroke> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Stroke const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusStroke(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusLayerChangeValues(octopus::LayerChange::Values const &value) {
    bool prev = false;
    write('{');
    if (value.fill.has_value()) {
        write("\"" "fill" "\":");
        if (Error error = serializeOctopusFill(value.fill.value()))
            return error;
        prev = true;
    }
    if (value.stroke.has_value()) {
        if (prev)
            write(',');
        write("\"" "stroke" "\":");
        if (Error error = serializeOctopusVectorStroke(value.stroke.value()))
            return error;
        prev = true;
    }
    if (value.effect.has_value()) {
        if (prev)
            write(',');
        write("\"" "effect" "\":");
        if (Error error = serializeOctopusEffect(value.effect.value()))
            return error;
        prev = true;
    }
    if (value.filter.has_value()) {
        if (prev)
            write(',');
        write("\"" "filter" "\":");
        if (Error error = serializeOctopusFilter(value.filter.value()))
            return error;
        prev = true;
    }
    if (value.shape.has_value()) {
        if (prev)
            write(',');
        write("\"" "shape" "\":");
        if (Error error = serializeOctopusShape(value.shape.value()))
            return error;
        prev = true;
    }
    if (value.text.has_value()) {
        if (prev)
            write(',');
        write("\"" "text" "\":");
        if (Error error = serializeOctopusText(value.text.value()))
            return error;
        prev = true;
    }
    if (value.visible.has_value()) {
        if (prev)
            write(',');
        write("\"" "visible" "\":");
        if (Error error = serializeBool(value.visible.value()))
            return error;
        prev = true;
    }
    if (value.opacity.has_value()) {
        if (prev)
            write(',');
        write("\"" "opacity" "\":");
        if (Error error = serializeDouble(value.opacity.value()))
            return error;
        prev = true;
    }
    if (value.blendMode.has_value()) {
        if (prev)
            write(',');
        write("\"" "blendMode" "\":");
        if (Error error = serializeOctopusBlendMode(value.blendMode.value()))
            return error;
        prev = true;
    }
    if (value.transform.has_value()) {
        if (prev)
            write(',');
        write("\"" "transform" "\":");
        if (Error error = serializeStdArrayDouble6(value.transform.value()))
            return error;
        prev = true;
    }
    if (value.featureScale.has_value()) {
        if (prev)
            write(',');
        write("\"" "featureScale" "\":");
        if (Error error = serializeDouble(value.featureScale.value()))
            return error;
        prev = true;
    }
    if (value.maskBasis.has_value()) {
        if (prev)
            write(',');
        write("\"" "maskBasis" "\":");
        if (Error error = serializeOctopusMaskBasis(value.maskBasis.value()))
            return error;
        prev = true;
    }
    if (value.maskChannels.has_value()) {
        if (prev)
            write(',');
        write("\"" "maskChannels" "\":");
        if (Error error = serializeStdArrayDouble5(value.maskChannels.value()))
            return error;
        prev = true;
    }
    if (value.name.has_value()) {
        if (prev)
            write(',');
        write("\"" "name" "\":");
        if (Error error = serializeStdString(value.name.value()))
            return error;
        prev = true;
    }
    if (value.componentId.has_value()) {
        if (prev)
            write(',');
        write("\"" "componentId" "\":");
        if (Error error = serializeStdString(value.componentId.value()))
            return error;
        prev = true;
    }
    if (value.effects.has_value()) {
        if (prev)
            write(',');
        write("\"" "effects" "\":");
        if (Error error = serializeStdVectorOctopusEffect(value.effects.value()))
            return error;
        prev = true;
    }
    if (value.basis.has_value()) {
        if (prev)
            write(',');
        write("\"" "basis" "\":");
        if (Error error = serializeOctopusEffectBasis(value.basis.value()))
            return error;
        prev = true;
    }
    if (value.filters.has_value()) {
        if (prev)
            write(',');
        write("\"" "filters" "\":");
        if (Error error = serializeStdVectorOctopusFilter(value.filters.value()))
            return error;
        prev = true;
    }
    if (value.fills.has_value()) {
        if (prev)
            write(',');
        write("\"" "fills" "\":");
        if (Error error = serializeStdVectorOctopusFill(value.fills.value()))
            return error;
        prev = true;
    }
    if (value.strokes.has_value()) {
        if (prev)
            write(',');
        write("\"" "strokes" "\":");
        if (Error error = serializeStdVectorOctopusStroke(value.strokes.value()))
            return error;
        prev = true;
    }
    if (value.fillRule.has_value()) {
        if (prev)
            write(',');
        write("\"" "fillRule" "\":");
        if (Error error = serializeOctopusShapeFillRule(value.fillRule.value()))
            return error;
        prev = true;
    }
    if (value.path.has_value()) {
        if (prev)
            write(',');
        write("\"" "path" "\":");
        if (Error error = serializeOctopusPath(value.path.value()))
            return error;
        prev = true;
    }
    if (value.value.has_value()) {
        if (prev)
            write(',');
        write("\"" "value" "\":");
        if (Error error = serializeStdString(value.value.value()))
            return error;
        prev = true;
    }
    if (value.defaultStyle.has_value()) {
        if (prev)
            write(',');
        write("\"" "defaultStyle" "\":");
        if (Error error = serializeOctopusTextStyle(value.defaultStyle.value()))
            return error;
        prev = true;
    }
    if (value.styles.has_value()) {
        if (prev)
            write(',');
        write("\"" "styles" "\":");
        if (Error error = serializeStdVectorOctopusStyleRange(value.styles.value()))
            return error;
        prev = true;
    }
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusLayerChange(octopus::LayerChange const &value) {
    write("{\"" "subject" "\":");
    if (Error error = serializeOctopusLayerChangeSubject(value.subject))
        return error;
    write(",\"" "op" "\":");
    if (Error error = serializeOctopusLayerChangeOp(value.op))
        return error;
    if (value.index.has_value()) {
        write(",\"" "index" "\":");
        if (Error error = serializeInt(value.index.value()))
            return error;
    }
    if (value.filterIndex.has_value()) {
        write(",\"" "filterIndex" "\":");
        if (Error error = serializeInt(value.filterIndex.value()))
            return error;
    }
    write(",\"" "values" "\":");
    if (Error error = serializeOctopusLayerChangeValues(value.values))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusLayerChange(std::vector<octopus::LayerChange> const &value) {
    bool prev = false;
    write('[');
    for (octopus::LayerChange const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusLayerChange(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusOverride(octopus::Override const &value) {
    write("{\"" "target" "\":");
    if (Error error = serializeStdVectorStdString(value.target))
        return error;
    write(",\"" "changes" "\":");
    if (Error error = serializeStdVectorOctopusLayerChange(value.changes))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeStdVectorOctopusOverride(std::vector<octopus::Override> const &value) {
    bool prev = false;
    write('[');
    for (octopus::Override const &elem : value) { if (prev) write(','); prev = true; if (Error error = serializeOctopusOverride(elem)) return error; }
    write(']');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusLayer(octopus::Layer const &value) {
    write("{\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    write(",\"" "type" "\":");
    if (Error error = serializeOctopusLayerType(value.type))
        return error;
    write(",\"" "name" "\":");
    if (Error error = serializeStdString(value.name))
        return error;
    write(",\"" "visible" "\":");
    if (Error error = serializeBool(value.visible))
        return error;
    write(",\"" "opacity" "\":");
    if (Error error = serializeDouble(value.opacity))
        return error;
    write(",\"" "blendMode" "\":");
    if (Error error = serializeOctopusBlendMode(value.blendMode))
        return error;
    write(",\"" "transform" "\":");
    if (Error error = serializeDouble_6(value.transform))
        return error;
    if (value.featureScale.has_value()) {
        write(",\"" "featureScale" "\":");
        if (Error error = serializeDouble(value.featureScale.value()))
            return error;
    }
    if (value.shape.has_value()) {
        write(",\"" "shape" "\":");
        if (Error error = serializeOctopusShape(value.shape.value()))
            return error;
    }
    if (value.text.has_value()) {
        write(",\"" "text" "\":");
        if (Error error = serializeOctopusText(value.text.value()))
            return error;
    }
    if (value.mask.has_value()) {
        write(",\"" "mask" "\":");
        if (Error error = serializeOctopusLayer(*value.mask))
            return error;
    }
    if (value.maskBasis.has_value()) {
        write(",\"" "maskBasis" "\":");
        if (Error error = serializeOctopusMaskBasis(value.maskBasis.value()))
            return error;
    }
    if (value.maskChannels.has_value()) {
        write(",\"" "maskChannels" "\":");
        if (Error error = serializeStdArrayDouble5(value.maskChannels.value()))
            return error;
    }
    if (value.layers.has_value()) {
        write(",\"" "layers" "\":");
        if (Error error = serializeStdListOctopusLayer(value.layers.value()))
            return error;
    }
    if (value.componentId.has_value()) {
        write(",\"" "componentId" "\":");
        if (Error error = serializeStdString(value.componentId.value()))
            return error;
    }
    if (value.overrides.has_value()) {
        write(",\"" "overrides" "\":");
        if (Error error = serializeStdVectorOctopusOverride(value.overrides.value()))
            return error;
    }
    write(",\"" "effects" "\":");
    if (Error error = serializeStdVectorOctopusEffect(value.effects))
        return error;
    write('}');
    return Error::OK;
}

Serializer::Error Serializer::serializeOctopusOctopus(octopus::Octopus const &value) {
    write("{\"" "type" "\":");
    if (Error error = serializeOctopusOctopusType(value.type))
        return error;
    write(",\"" "version" "\":");
    if (Error error = serializeStdString(value.version))
        return error;
    write(",\"" "id" "\":");
    if (Error error = serializeStdString(value.id))
        return error;
    if (value.dimensions.has_value()) {
        write(",\"" "dimensions" "\":");
        if (Error error = serializeOctopusDimensions(value.dimensions.value()))
            return error;
    }
    if (value.content.has_value()) {
        write(",\"" "content" "\":");
        if (Error error = serializeOctopusLayer(*value.content))
            return error;
    }
    write('}');
    return Error::OK;
}

}
